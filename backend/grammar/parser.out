Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OBJECT

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> declaration
Rule 5     instruction -> declaration_array
Rule 6     instruction -> assignment
Rule 7     instruction -> if
Rule 8     instruction -> switch
Rule 9     instruction -> while
Rule 10    instruction -> for
Rule 11    instruction -> function
Rule 12    instruction -> methods SEMICOLON
Rule 13    instruction -> call_function SEMICOLON
Rule 14    instruction -> break
Rule 15    instruction -> continue
Rule 16    instruction -> return
Rule 17    instruction -> print
Rule 18    declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON
Rule 19    declaration -> symbol_type ID COLON data_type SEMICOLON
Rule 20    declaration -> symbol_type ID EQUAL expression SEMICOLON
Rule 21    assignment -> ID EQUAL expression SEMICOLON
Rule 22    assignment -> ID ADITION expression SEMICOLON
Rule 23    assignment -> ID SUBTRACTION expression SEMICOLON
Rule 24    if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 25    if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 26    if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
Rule 27    if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 28    else_if_list -> else_if_list else_if
Rule 29    else_if_list -> else_if
Rule 30    else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 31    switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
Rule 32    cases -> cases case
Rule 33    cases -> case
Rule 34    case -> CASE expression COLON block
Rule 35    case -> DEFAULT COLON block
Rule 36    while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 37    for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 38    for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 39    break -> BREAK SEMICOLON
Rule 40    continue -> CONTINUE SEMICOLON
Rule 41    function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 42    function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 43    function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 44    function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
Rule 45    params -> params COMMA param
Rule 46    params -> param
Rule 47    param -> ID COLON data_type
Rule 48    param -> ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET
Rule 49    return -> RETURN expression SEMICOLON
Rule 50    return -> RETURN SEMICOLON
Rule 51    call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
Rule 52    call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 53    methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 54    methods -> methods PERIOD name_method expression
Rule 55    methods -> methods PERIOD name_method
Rule 56    methods -> access_array
Rule 57    methods -> value
Rule 58    name_method -> TOSTRING
Rule 59    name_method -> TOLOWERCASE
Rule 60    name_method -> TOUPPERCASE
Rule 61    name_method -> PUSH
Rule 62    name_method -> POP
Rule 63    name_method -> INDEXOF
Rule 64    name_method -> JOIN
Rule 65    name_method -> LENGTH
Rule 66    print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
Rule 67    methods -> PARSEINT expression
Rule 68    methods -> PARSEFLOAT expression
Rule 69    methods -> TYPEOF expression
Rule 70    declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
Rule 71    assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
Rule 72    access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
Rule 73    expression_list -> expression_list COMMA expression
Rule 74    expression_list -> expression
Rule 75    expression -> expression_unary
Rule 76    expression -> expression_binary
Rule 77    expression -> expression_group
Rule 78    expression -> methods
Rule 79    expression -> call_function
Rule 80    expression_unary -> MINUS expression
Rule 81    expression_unary -> NOT expression
Rule 82    expression_unary -> expression INCREASE
Rule 83    expression_unary -> expression DECREASE
Rule 84    expression_binary -> arithmetic
Rule 85    expression_binary -> relational
Rule 86    expression_binary -> logical
Rule 87    arithmetic -> expression PLUS expression
Rule 88    arithmetic -> expression MINUS expression
Rule 89    arithmetic -> expression TIMES expression
Rule 90    arithmetic -> expression DIVIDE expression
Rule 91    arithmetic -> expression MODULUS expression
Rule 92    relational -> expression LESS expression
Rule 93    relational -> expression GREATER expression
Rule 94    relational -> expression EQUAL_TO expression
Rule 95    relational -> expression NOT_EQUAL_TO expression
Rule 96    relational -> expression LESS_EQUAL expression
Rule 97    relational -> expression GREATER_EQUAL expression
Rule 98    logical -> expression AND expression
Rule 99    logical -> expression OR expression
Rule 100   expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 101   symbol_type -> VAR
Rule 102   symbol_type -> CONST
Rule 103   data_type -> NUMBER
Rule 104   data_type -> FLOAT
Rule 105   data_type -> STRING
Rule 106   data_type -> CHAR
Rule 107   data_type -> BOOLEAN
Rule 108   value -> INTEGER
Rule 109   value -> DECIMAL
Rule 110   value -> TEXT
Rule 111   value -> CHARACTER
Rule 112   value -> BOOL
Rule 113   value -> NULL
Rule 114   value -> ID

Terminals, with rules where they appear

ADITION              : 22
AND                  : 98
BOOL                 : 112
BOOLEAN              : 107
BREAK                : 39
CASE                 : 34
CHAR                 : 106
CHARACTER            : 111
COLON                : 18 19 34 35 42 44 47 48 70
COMMA                : 45 73
CONSOLE              : 66
CONST                : 102
CONTINUE             : 40
DECIMAL              : 109
DECREASE             : 83
DEFAULT              : 35
DIVIDE               : 90
ELSE                 : 25 27 30
EQUAL                : 18 20 21 70 71
EQUAL_TO             : 94
FLOAT                : 104
FOR                  : 37 38
FUNCTION             : 41 42 43 44
GREATER              : 93
GREATER_EQUAL        : 97
ID                   : 18 19 20 21 22 23 38 38 41 42 43 44 47 48 51 52 70 71 72 114
IF                   : 24 25 26 27 30
INCREASE             : 82
INDEXOF              : 63
INTEGER              : 108
JOIN                 : 64
LEFT_CURLY_BRACKET   : 24 25 25 26 27 27 30 31 36 37 38 41 42 43 44
LEFT_PARENTHESIS     : 24 25 26 27 30 31 36 37 38 41 42 43 44 51 52 53 66 100
LEFT_SQ_BRACKET      : 48 70 70 71 72
LENGTH               : 65
LESS                 : 92
LESS_EQUAL           : 96
LOG                  : 66
MINUS                : 80 88
MODULUS              : 91
NOT                  : 81
NOT_EQUAL_TO         : 95
NULL                 : 113
NUMBER               : 103
OBJECT               : 
OF                   : 38
OR                   : 99
PARSEFLOAT           : 68
PARSEINT             : 67
PERIOD               : 53 54 55 66
PLUS                 : 87
POP                  : 62
PUSH                 : 61
RETURN               : 49 50
RIGHT_CURLY_BRACKET  : 24 25 25 26 27 27 30 31 36 37 38 41 42 43 44
RIGHT_PARENTHESIS    : 24 25 26 27 30 31 36 37 38 41 42 43 44 51 52 53 66 100
RIGHT_SQ_BRACKET     : 48 70 70 71 72
SEMICOLON            : 12 13 18 19 20 21 22 23 37 39 40 49 50 66 70 71
STRING               : 105
SUBTRACTION          : 23
SWITCH               : 31
TEXT                 : 110
TIMES                : 89
TOLOWERCASE          : 59
TOSTRING             : 58
TOUPPERCASE          : 60
TYPEOF               : 69
VAR                  : 101
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

access_array         : 56
arithmetic           : 84
assignment           : 6
block                : 1 2 24 25 25 26 27 27 30 34 35 36 37 38 41 42 43 44
break                : 14
call_function        : 13 79
case                 : 32 33
cases                : 31 32
continue             : 15
data_type            : 18 19 42 44 47 48 70
declaration          : 4 37
declaration_array    : 5
else_if              : 28 29
else_if_list         : 26 27 28
expression           : 18 20 21 22 23 24 25 26 27 30 31 34 36 37 37 49 54 67 68 69 71 71 72 73 74 80 81 82 83 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100
expression_binary    : 76
expression_group     : 77
expression_list      : 51 66 70 73
expression_unary     : 75
for                  : 10
function             : 11
if                   : 7
instruction          : 2 3
logical              : 86
methods              : 12 53 54 55 78
name_method          : 53 54 55
param                : 45 46
params               : 43 44 45
print                : 17
relational           : 85
return               : 16
start                : 0
switch               : 8
symbol_type          : 18 19 20 38 70
value                : 57
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    start                          shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 1

    (0) S' -> start .



state 2

    (1) start -> block .
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    $end            reduce using rule 1 (start -> block .)
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 3

    (3) block -> instruction .

    ID              reduce using rule 3 (block -> instruction .)
    IF              reduce using rule 3 (block -> instruction .)
    SWITCH          reduce using rule 3 (block -> instruction .)
    WHILE           reduce using rule 3 (block -> instruction .)
    FOR             reduce using rule 3 (block -> instruction .)
    FUNCTION        reduce using rule 3 (block -> instruction .)
    PARSEINT        reduce using rule 3 (block -> instruction .)
    PARSEFLOAT      reduce using rule 3 (block -> instruction .)
    TYPEOF          reduce using rule 3 (block -> instruction .)
    BREAK           reduce using rule 3 (block -> instruction .)
    CONTINUE        reduce using rule 3 (block -> instruction .)
    RETURN          reduce using rule 3 (block -> instruction .)
    CONSOLE         reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    CONST           reduce using rule 3 (block -> instruction .)
    INTEGER         reduce using rule 3 (block -> instruction .)
    DECIMAL         reduce using rule 3 (block -> instruction .)
    TEXT            reduce using rule 3 (block -> instruction .)
    CHARACTER       reduce using rule 3 (block -> instruction .)
    BOOL            reduce using rule 3 (block -> instruction .)
    NULL            reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (block -> instruction .)
    CASE            reduce using rule 3 (block -> instruction .)
    DEFAULT         reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> declaration .

    ID              reduce using rule 4 (instruction -> declaration .)
    IF              reduce using rule 4 (instruction -> declaration .)
    SWITCH          reduce using rule 4 (instruction -> declaration .)
    WHILE           reduce using rule 4 (instruction -> declaration .)
    FOR             reduce using rule 4 (instruction -> declaration .)
    FUNCTION        reduce using rule 4 (instruction -> declaration .)
    PARSEINT        reduce using rule 4 (instruction -> declaration .)
    PARSEFLOAT      reduce using rule 4 (instruction -> declaration .)
    TYPEOF          reduce using rule 4 (instruction -> declaration .)
    BREAK           reduce using rule 4 (instruction -> declaration .)
    CONTINUE        reduce using rule 4 (instruction -> declaration .)
    RETURN          reduce using rule 4 (instruction -> declaration .)
    CONSOLE         reduce using rule 4 (instruction -> declaration .)
    VAR             reduce using rule 4 (instruction -> declaration .)
    CONST           reduce using rule 4 (instruction -> declaration .)
    INTEGER         reduce using rule 4 (instruction -> declaration .)
    DECIMAL         reduce using rule 4 (instruction -> declaration .)
    TEXT            reduce using rule 4 (instruction -> declaration .)
    CHARACTER       reduce using rule 4 (instruction -> declaration .)
    BOOL            reduce using rule 4 (instruction -> declaration .)
    NULL            reduce using rule 4 (instruction -> declaration .)
    $end            reduce using rule 4 (instruction -> declaration .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (instruction -> declaration .)
    CASE            reduce using rule 4 (instruction -> declaration .)
    DEFAULT         reduce using rule 4 (instruction -> declaration .)


state 5

    (5) instruction -> declaration_array .

    ID              reduce using rule 5 (instruction -> declaration_array .)
    IF              reduce using rule 5 (instruction -> declaration_array .)
    SWITCH          reduce using rule 5 (instruction -> declaration_array .)
    WHILE           reduce using rule 5 (instruction -> declaration_array .)
    FOR             reduce using rule 5 (instruction -> declaration_array .)
    FUNCTION        reduce using rule 5 (instruction -> declaration_array .)
    PARSEINT        reduce using rule 5 (instruction -> declaration_array .)
    PARSEFLOAT      reduce using rule 5 (instruction -> declaration_array .)
    TYPEOF          reduce using rule 5 (instruction -> declaration_array .)
    BREAK           reduce using rule 5 (instruction -> declaration_array .)
    CONTINUE        reduce using rule 5 (instruction -> declaration_array .)
    RETURN          reduce using rule 5 (instruction -> declaration_array .)
    CONSOLE         reduce using rule 5 (instruction -> declaration_array .)
    VAR             reduce using rule 5 (instruction -> declaration_array .)
    CONST           reduce using rule 5 (instruction -> declaration_array .)
    INTEGER         reduce using rule 5 (instruction -> declaration_array .)
    DECIMAL         reduce using rule 5 (instruction -> declaration_array .)
    TEXT            reduce using rule 5 (instruction -> declaration_array .)
    CHARACTER       reduce using rule 5 (instruction -> declaration_array .)
    BOOL            reduce using rule 5 (instruction -> declaration_array .)
    NULL            reduce using rule 5 (instruction -> declaration_array .)
    $end            reduce using rule 5 (instruction -> declaration_array .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (instruction -> declaration_array .)
    CASE            reduce using rule 5 (instruction -> declaration_array .)
    DEFAULT         reduce using rule 5 (instruction -> declaration_array .)


state 6

    (6) instruction -> assignment .

    ID              reduce using rule 6 (instruction -> assignment .)
    IF              reduce using rule 6 (instruction -> assignment .)
    SWITCH          reduce using rule 6 (instruction -> assignment .)
    WHILE           reduce using rule 6 (instruction -> assignment .)
    FOR             reduce using rule 6 (instruction -> assignment .)
    FUNCTION        reduce using rule 6 (instruction -> assignment .)
    PARSEINT        reduce using rule 6 (instruction -> assignment .)
    PARSEFLOAT      reduce using rule 6 (instruction -> assignment .)
    TYPEOF          reduce using rule 6 (instruction -> assignment .)
    BREAK           reduce using rule 6 (instruction -> assignment .)
    CONTINUE        reduce using rule 6 (instruction -> assignment .)
    RETURN          reduce using rule 6 (instruction -> assignment .)
    CONSOLE         reduce using rule 6 (instruction -> assignment .)
    VAR             reduce using rule 6 (instruction -> assignment .)
    CONST           reduce using rule 6 (instruction -> assignment .)
    INTEGER         reduce using rule 6 (instruction -> assignment .)
    DECIMAL         reduce using rule 6 (instruction -> assignment .)
    TEXT            reduce using rule 6 (instruction -> assignment .)
    CHARACTER       reduce using rule 6 (instruction -> assignment .)
    BOOL            reduce using rule 6 (instruction -> assignment .)
    NULL            reduce using rule 6 (instruction -> assignment .)
    $end            reduce using rule 6 (instruction -> assignment .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (instruction -> assignment .)
    CASE            reduce using rule 6 (instruction -> assignment .)
    DEFAULT         reduce using rule 6 (instruction -> assignment .)


state 7

    (7) instruction -> if .

    ID              reduce using rule 7 (instruction -> if .)
    IF              reduce using rule 7 (instruction -> if .)
    SWITCH          reduce using rule 7 (instruction -> if .)
    WHILE           reduce using rule 7 (instruction -> if .)
    FOR             reduce using rule 7 (instruction -> if .)
    FUNCTION        reduce using rule 7 (instruction -> if .)
    PARSEINT        reduce using rule 7 (instruction -> if .)
    PARSEFLOAT      reduce using rule 7 (instruction -> if .)
    TYPEOF          reduce using rule 7 (instruction -> if .)
    BREAK           reduce using rule 7 (instruction -> if .)
    CONTINUE        reduce using rule 7 (instruction -> if .)
    RETURN          reduce using rule 7 (instruction -> if .)
    CONSOLE         reduce using rule 7 (instruction -> if .)
    VAR             reduce using rule 7 (instruction -> if .)
    CONST           reduce using rule 7 (instruction -> if .)
    INTEGER         reduce using rule 7 (instruction -> if .)
    DECIMAL         reduce using rule 7 (instruction -> if .)
    TEXT            reduce using rule 7 (instruction -> if .)
    CHARACTER       reduce using rule 7 (instruction -> if .)
    BOOL            reduce using rule 7 (instruction -> if .)
    NULL            reduce using rule 7 (instruction -> if .)
    $end            reduce using rule 7 (instruction -> if .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (instruction -> if .)
    CASE            reduce using rule 7 (instruction -> if .)
    DEFAULT         reduce using rule 7 (instruction -> if .)


state 8

    (8) instruction -> switch .

    ID              reduce using rule 8 (instruction -> switch .)
    IF              reduce using rule 8 (instruction -> switch .)
    SWITCH          reduce using rule 8 (instruction -> switch .)
    WHILE           reduce using rule 8 (instruction -> switch .)
    FOR             reduce using rule 8 (instruction -> switch .)
    FUNCTION        reduce using rule 8 (instruction -> switch .)
    PARSEINT        reduce using rule 8 (instruction -> switch .)
    PARSEFLOAT      reduce using rule 8 (instruction -> switch .)
    TYPEOF          reduce using rule 8 (instruction -> switch .)
    BREAK           reduce using rule 8 (instruction -> switch .)
    CONTINUE        reduce using rule 8 (instruction -> switch .)
    RETURN          reduce using rule 8 (instruction -> switch .)
    CONSOLE         reduce using rule 8 (instruction -> switch .)
    VAR             reduce using rule 8 (instruction -> switch .)
    CONST           reduce using rule 8 (instruction -> switch .)
    INTEGER         reduce using rule 8 (instruction -> switch .)
    DECIMAL         reduce using rule 8 (instruction -> switch .)
    TEXT            reduce using rule 8 (instruction -> switch .)
    CHARACTER       reduce using rule 8 (instruction -> switch .)
    BOOL            reduce using rule 8 (instruction -> switch .)
    NULL            reduce using rule 8 (instruction -> switch .)
    $end            reduce using rule 8 (instruction -> switch .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (instruction -> switch .)
    CASE            reduce using rule 8 (instruction -> switch .)
    DEFAULT         reduce using rule 8 (instruction -> switch .)


state 9

    (9) instruction -> while .

    ID              reduce using rule 9 (instruction -> while .)
    IF              reduce using rule 9 (instruction -> while .)
    SWITCH          reduce using rule 9 (instruction -> while .)
    WHILE           reduce using rule 9 (instruction -> while .)
    FOR             reduce using rule 9 (instruction -> while .)
    FUNCTION        reduce using rule 9 (instruction -> while .)
    PARSEINT        reduce using rule 9 (instruction -> while .)
    PARSEFLOAT      reduce using rule 9 (instruction -> while .)
    TYPEOF          reduce using rule 9 (instruction -> while .)
    BREAK           reduce using rule 9 (instruction -> while .)
    CONTINUE        reduce using rule 9 (instruction -> while .)
    RETURN          reduce using rule 9 (instruction -> while .)
    CONSOLE         reduce using rule 9 (instruction -> while .)
    VAR             reduce using rule 9 (instruction -> while .)
    CONST           reduce using rule 9 (instruction -> while .)
    INTEGER         reduce using rule 9 (instruction -> while .)
    DECIMAL         reduce using rule 9 (instruction -> while .)
    TEXT            reduce using rule 9 (instruction -> while .)
    CHARACTER       reduce using rule 9 (instruction -> while .)
    BOOL            reduce using rule 9 (instruction -> while .)
    NULL            reduce using rule 9 (instruction -> while .)
    $end            reduce using rule 9 (instruction -> while .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (instruction -> while .)
    CASE            reduce using rule 9 (instruction -> while .)
    DEFAULT         reduce using rule 9 (instruction -> while .)


state 10

    (10) instruction -> for .

    ID              reduce using rule 10 (instruction -> for .)
    IF              reduce using rule 10 (instruction -> for .)
    SWITCH          reduce using rule 10 (instruction -> for .)
    WHILE           reduce using rule 10 (instruction -> for .)
    FOR             reduce using rule 10 (instruction -> for .)
    FUNCTION        reduce using rule 10 (instruction -> for .)
    PARSEINT        reduce using rule 10 (instruction -> for .)
    PARSEFLOAT      reduce using rule 10 (instruction -> for .)
    TYPEOF          reduce using rule 10 (instruction -> for .)
    BREAK           reduce using rule 10 (instruction -> for .)
    CONTINUE        reduce using rule 10 (instruction -> for .)
    RETURN          reduce using rule 10 (instruction -> for .)
    CONSOLE         reduce using rule 10 (instruction -> for .)
    VAR             reduce using rule 10 (instruction -> for .)
    CONST           reduce using rule 10 (instruction -> for .)
    INTEGER         reduce using rule 10 (instruction -> for .)
    DECIMAL         reduce using rule 10 (instruction -> for .)
    TEXT            reduce using rule 10 (instruction -> for .)
    CHARACTER       reduce using rule 10 (instruction -> for .)
    BOOL            reduce using rule 10 (instruction -> for .)
    NULL            reduce using rule 10 (instruction -> for .)
    $end            reduce using rule 10 (instruction -> for .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (instruction -> for .)
    CASE            reduce using rule 10 (instruction -> for .)
    DEFAULT         reduce using rule 10 (instruction -> for .)


state 11

    (11) instruction -> function .

    ID              reduce using rule 11 (instruction -> function .)
    IF              reduce using rule 11 (instruction -> function .)
    SWITCH          reduce using rule 11 (instruction -> function .)
    WHILE           reduce using rule 11 (instruction -> function .)
    FOR             reduce using rule 11 (instruction -> function .)
    FUNCTION        reduce using rule 11 (instruction -> function .)
    PARSEINT        reduce using rule 11 (instruction -> function .)
    PARSEFLOAT      reduce using rule 11 (instruction -> function .)
    TYPEOF          reduce using rule 11 (instruction -> function .)
    BREAK           reduce using rule 11 (instruction -> function .)
    CONTINUE        reduce using rule 11 (instruction -> function .)
    RETURN          reduce using rule 11 (instruction -> function .)
    CONSOLE         reduce using rule 11 (instruction -> function .)
    VAR             reduce using rule 11 (instruction -> function .)
    CONST           reduce using rule 11 (instruction -> function .)
    INTEGER         reduce using rule 11 (instruction -> function .)
    DECIMAL         reduce using rule 11 (instruction -> function .)
    TEXT            reduce using rule 11 (instruction -> function .)
    CHARACTER       reduce using rule 11 (instruction -> function .)
    BOOL            reduce using rule 11 (instruction -> function .)
    NULL            reduce using rule 11 (instruction -> function .)
    $end            reduce using rule 11 (instruction -> function .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (instruction -> function .)
    CASE            reduce using rule 11 (instruction -> function .)
    DEFAULT         reduce using rule 11 (instruction -> function .)


state 12

    (12) instruction -> methods . SEMICOLON
    (53) methods -> methods . PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> methods . PERIOD name_method expression
    (55) methods -> methods . PERIOD name_method

    SEMICOLON       shift and go to state 43
    PERIOD          shift and go to state 44


state 13

    (13) instruction -> call_function . SEMICOLON

    SEMICOLON       shift and go to state 45


state 14

    (14) instruction -> break .

    ID              reduce using rule 14 (instruction -> break .)
    IF              reduce using rule 14 (instruction -> break .)
    SWITCH          reduce using rule 14 (instruction -> break .)
    WHILE           reduce using rule 14 (instruction -> break .)
    FOR             reduce using rule 14 (instruction -> break .)
    FUNCTION        reduce using rule 14 (instruction -> break .)
    PARSEINT        reduce using rule 14 (instruction -> break .)
    PARSEFLOAT      reduce using rule 14 (instruction -> break .)
    TYPEOF          reduce using rule 14 (instruction -> break .)
    BREAK           reduce using rule 14 (instruction -> break .)
    CONTINUE        reduce using rule 14 (instruction -> break .)
    RETURN          reduce using rule 14 (instruction -> break .)
    CONSOLE         reduce using rule 14 (instruction -> break .)
    VAR             reduce using rule 14 (instruction -> break .)
    CONST           reduce using rule 14 (instruction -> break .)
    INTEGER         reduce using rule 14 (instruction -> break .)
    DECIMAL         reduce using rule 14 (instruction -> break .)
    TEXT            reduce using rule 14 (instruction -> break .)
    CHARACTER       reduce using rule 14 (instruction -> break .)
    BOOL            reduce using rule 14 (instruction -> break .)
    NULL            reduce using rule 14 (instruction -> break .)
    $end            reduce using rule 14 (instruction -> break .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (instruction -> break .)
    CASE            reduce using rule 14 (instruction -> break .)
    DEFAULT         reduce using rule 14 (instruction -> break .)


state 15

    (15) instruction -> continue .

    ID              reduce using rule 15 (instruction -> continue .)
    IF              reduce using rule 15 (instruction -> continue .)
    SWITCH          reduce using rule 15 (instruction -> continue .)
    WHILE           reduce using rule 15 (instruction -> continue .)
    FOR             reduce using rule 15 (instruction -> continue .)
    FUNCTION        reduce using rule 15 (instruction -> continue .)
    PARSEINT        reduce using rule 15 (instruction -> continue .)
    PARSEFLOAT      reduce using rule 15 (instruction -> continue .)
    TYPEOF          reduce using rule 15 (instruction -> continue .)
    BREAK           reduce using rule 15 (instruction -> continue .)
    CONTINUE        reduce using rule 15 (instruction -> continue .)
    RETURN          reduce using rule 15 (instruction -> continue .)
    CONSOLE         reduce using rule 15 (instruction -> continue .)
    VAR             reduce using rule 15 (instruction -> continue .)
    CONST           reduce using rule 15 (instruction -> continue .)
    INTEGER         reduce using rule 15 (instruction -> continue .)
    DECIMAL         reduce using rule 15 (instruction -> continue .)
    TEXT            reduce using rule 15 (instruction -> continue .)
    CHARACTER       reduce using rule 15 (instruction -> continue .)
    BOOL            reduce using rule 15 (instruction -> continue .)
    NULL            reduce using rule 15 (instruction -> continue .)
    $end            reduce using rule 15 (instruction -> continue .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (instruction -> continue .)
    CASE            reduce using rule 15 (instruction -> continue .)
    DEFAULT         reduce using rule 15 (instruction -> continue .)


state 16

    (16) instruction -> return .

    ID              reduce using rule 16 (instruction -> return .)
    IF              reduce using rule 16 (instruction -> return .)
    SWITCH          reduce using rule 16 (instruction -> return .)
    WHILE           reduce using rule 16 (instruction -> return .)
    FOR             reduce using rule 16 (instruction -> return .)
    FUNCTION        reduce using rule 16 (instruction -> return .)
    PARSEINT        reduce using rule 16 (instruction -> return .)
    PARSEFLOAT      reduce using rule 16 (instruction -> return .)
    TYPEOF          reduce using rule 16 (instruction -> return .)
    BREAK           reduce using rule 16 (instruction -> return .)
    CONTINUE        reduce using rule 16 (instruction -> return .)
    RETURN          reduce using rule 16 (instruction -> return .)
    CONSOLE         reduce using rule 16 (instruction -> return .)
    VAR             reduce using rule 16 (instruction -> return .)
    CONST           reduce using rule 16 (instruction -> return .)
    INTEGER         reduce using rule 16 (instruction -> return .)
    DECIMAL         reduce using rule 16 (instruction -> return .)
    TEXT            reduce using rule 16 (instruction -> return .)
    CHARACTER       reduce using rule 16 (instruction -> return .)
    BOOL            reduce using rule 16 (instruction -> return .)
    NULL            reduce using rule 16 (instruction -> return .)
    $end            reduce using rule 16 (instruction -> return .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (instruction -> return .)
    CASE            reduce using rule 16 (instruction -> return .)
    DEFAULT         reduce using rule 16 (instruction -> return .)


state 17

    (17) instruction -> print .

    ID              reduce using rule 17 (instruction -> print .)
    IF              reduce using rule 17 (instruction -> print .)
    SWITCH          reduce using rule 17 (instruction -> print .)
    WHILE           reduce using rule 17 (instruction -> print .)
    FOR             reduce using rule 17 (instruction -> print .)
    FUNCTION        reduce using rule 17 (instruction -> print .)
    PARSEINT        reduce using rule 17 (instruction -> print .)
    PARSEFLOAT      reduce using rule 17 (instruction -> print .)
    TYPEOF          reduce using rule 17 (instruction -> print .)
    BREAK           reduce using rule 17 (instruction -> print .)
    CONTINUE        reduce using rule 17 (instruction -> print .)
    RETURN          reduce using rule 17 (instruction -> print .)
    CONSOLE         reduce using rule 17 (instruction -> print .)
    VAR             reduce using rule 17 (instruction -> print .)
    CONST           reduce using rule 17 (instruction -> print .)
    INTEGER         reduce using rule 17 (instruction -> print .)
    DECIMAL         reduce using rule 17 (instruction -> print .)
    TEXT            reduce using rule 17 (instruction -> print .)
    CHARACTER       reduce using rule 17 (instruction -> print .)
    BOOL            reduce using rule 17 (instruction -> print .)
    NULL            reduce using rule 17 (instruction -> print .)
    $end            reduce using rule 17 (instruction -> print .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (instruction -> print .)
    CASE            reduce using rule 17 (instruction -> print .)
    DEFAULT         reduce using rule 17 (instruction -> print .)


state 18

    (18) declaration -> symbol_type . ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type . ID COLON data_type SEMICOLON
    (20) declaration -> symbol_type . ID EQUAL expression SEMICOLON
    (70) declaration_array -> symbol_type . ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    ID              shift and go to state 46


state 19

    (21) assignment -> ID . EQUAL expression SEMICOLON
    (22) assignment -> ID . ADITION expression SEMICOLON
    (23) assignment -> ID . SUBTRACTION expression SEMICOLON
    (71) assignment -> ID . LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (51) call_function -> ID . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> ID . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (72) access_array -> ID . LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (114) value -> ID .

    EQUAL           shift and go to state 47
    ADITION         shift and go to state 48
    SUBTRACTION     shift and go to state 49
    LEFT_SQ_BRACKET shift and go to state 50
    LEFT_PARENTHESIS shift and go to state 51
    SEMICOLON       reduce using rule 114 (value -> ID .)
    PERIOD          reduce using rule 114 (value -> ID .)


state 20

    (24) if -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 52


state 21

    (31) switch -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 53


state 22

    (36) while -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 54


state 23

    (37) for -> FOR . LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> FOR . LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 55


state 24

    (41) function -> FUNCTION . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> FUNCTION . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> FUNCTION . ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> FUNCTION . ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    ID              shift and go to state 56


state 25

    (56) methods -> access_array .

    SEMICOLON       reduce using rule 56 (methods -> access_array .)
    PERIOD          reduce using rule 56 (methods -> access_array .)
    INCREASE        reduce using rule 56 (methods -> access_array .)
    DECREASE        reduce using rule 56 (methods -> access_array .)
    PLUS            reduce using rule 56 (methods -> access_array .)
    MINUS           reduce using rule 56 (methods -> access_array .)
    TIMES           reduce using rule 56 (methods -> access_array .)
    DIVIDE          reduce using rule 56 (methods -> access_array .)
    MODULUS         reduce using rule 56 (methods -> access_array .)
    LESS            reduce using rule 56 (methods -> access_array .)
    GREATER         reduce using rule 56 (methods -> access_array .)
    EQUAL_TO        reduce using rule 56 (methods -> access_array .)
    NOT_EQUAL_TO    reduce using rule 56 (methods -> access_array .)
    LESS_EQUAL      reduce using rule 56 (methods -> access_array .)
    GREATER_EQUAL   reduce using rule 56 (methods -> access_array .)
    AND             reduce using rule 56 (methods -> access_array .)
    OR              reduce using rule 56 (methods -> access_array .)
    RIGHT_SQ_BRACKET reduce using rule 56 (methods -> access_array .)
    RIGHT_PARENTHESIS reduce using rule 56 (methods -> access_array .)
    COMMA           reduce using rule 56 (methods -> access_array .)
    COLON           reduce using rule 56 (methods -> access_array .)


state 26

    (57) methods -> value .

    SEMICOLON       reduce using rule 57 (methods -> value .)
    PERIOD          reduce using rule 57 (methods -> value .)
    INCREASE        reduce using rule 57 (methods -> value .)
    DECREASE        reduce using rule 57 (methods -> value .)
    PLUS            reduce using rule 57 (methods -> value .)
    MINUS           reduce using rule 57 (methods -> value .)
    TIMES           reduce using rule 57 (methods -> value .)
    DIVIDE          reduce using rule 57 (methods -> value .)
    MODULUS         reduce using rule 57 (methods -> value .)
    LESS            reduce using rule 57 (methods -> value .)
    GREATER         reduce using rule 57 (methods -> value .)
    EQUAL_TO        reduce using rule 57 (methods -> value .)
    NOT_EQUAL_TO    reduce using rule 57 (methods -> value .)
    LESS_EQUAL      reduce using rule 57 (methods -> value .)
    GREATER_EQUAL   reduce using rule 57 (methods -> value .)
    AND             reduce using rule 57 (methods -> value .)
    OR              reduce using rule 57 (methods -> value .)
    RIGHT_SQ_BRACKET reduce using rule 57 (methods -> value .)
    RIGHT_PARENTHESIS reduce using rule 57 (methods -> value .)
    COMMA           reduce using rule 57 (methods -> value .)
    COLON           reduce using rule 57 (methods -> value .)


state 27

    (67) methods -> PARSEINT . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 57
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 28

    (68) methods -> PARSEFLOAT . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 70
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 29

    (69) methods -> TYPEOF . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 71
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 30

    (39) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 72


state 31

    (40) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 73


state 32

    (49) return -> RETURN . expression SEMICOLON
    (50) return -> RETURN . SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    SEMICOLON       shift and go to state 75
    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 74
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 33

    (66) print -> CONSOLE . PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON

    PERIOD          shift and go to state 76


state 34

    (101) symbol_type -> VAR .

    ID              reduce using rule 101 (symbol_type -> VAR .)


state 35

    (102) symbol_type -> CONST .

    ID              reduce using rule 102 (symbol_type -> CONST .)


state 36

    (108) value -> INTEGER .

    SEMICOLON       reduce using rule 108 (value -> INTEGER .)
    PERIOD          reduce using rule 108 (value -> INTEGER .)
    INCREASE        reduce using rule 108 (value -> INTEGER .)
    DECREASE        reduce using rule 108 (value -> INTEGER .)
    PLUS            reduce using rule 108 (value -> INTEGER .)
    MINUS           reduce using rule 108 (value -> INTEGER .)
    TIMES           reduce using rule 108 (value -> INTEGER .)
    DIVIDE          reduce using rule 108 (value -> INTEGER .)
    MODULUS         reduce using rule 108 (value -> INTEGER .)
    LESS            reduce using rule 108 (value -> INTEGER .)
    GREATER         reduce using rule 108 (value -> INTEGER .)
    EQUAL_TO        reduce using rule 108 (value -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 108 (value -> INTEGER .)
    LESS_EQUAL      reduce using rule 108 (value -> INTEGER .)
    GREATER_EQUAL   reduce using rule 108 (value -> INTEGER .)
    AND             reduce using rule 108 (value -> INTEGER .)
    OR              reduce using rule 108 (value -> INTEGER .)
    RIGHT_SQ_BRACKET reduce using rule 108 (value -> INTEGER .)
    RIGHT_PARENTHESIS reduce using rule 108 (value -> INTEGER .)
    COMMA           reduce using rule 108 (value -> INTEGER .)
    COLON           reduce using rule 108 (value -> INTEGER .)


state 37

    (109) value -> DECIMAL .

    SEMICOLON       reduce using rule 109 (value -> DECIMAL .)
    PERIOD          reduce using rule 109 (value -> DECIMAL .)
    INCREASE        reduce using rule 109 (value -> DECIMAL .)
    DECREASE        reduce using rule 109 (value -> DECIMAL .)
    PLUS            reduce using rule 109 (value -> DECIMAL .)
    MINUS           reduce using rule 109 (value -> DECIMAL .)
    TIMES           reduce using rule 109 (value -> DECIMAL .)
    DIVIDE          reduce using rule 109 (value -> DECIMAL .)
    MODULUS         reduce using rule 109 (value -> DECIMAL .)
    LESS            reduce using rule 109 (value -> DECIMAL .)
    GREATER         reduce using rule 109 (value -> DECIMAL .)
    EQUAL_TO        reduce using rule 109 (value -> DECIMAL .)
    NOT_EQUAL_TO    reduce using rule 109 (value -> DECIMAL .)
    LESS_EQUAL      reduce using rule 109 (value -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 109 (value -> DECIMAL .)
    AND             reduce using rule 109 (value -> DECIMAL .)
    OR              reduce using rule 109 (value -> DECIMAL .)
    RIGHT_SQ_BRACKET reduce using rule 109 (value -> DECIMAL .)
    RIGHT_PARENTHESIS reduce using rule 109 (value -> DECIMAL .)
    COMMA           reduce using rule 109 (value -> DECIMAL .)
    COLON           reduce using rule 109 (value -> DECIMAL .)


state 38

    (110) value -> TEXT .

    SEMICOLON       reduce using rule 110 (value -> TEXT .)
    PERIOD          reduce using rule 110 (value -> TEXT .)
    INCREASE        reduce using rule 110 (value -> TEXT .)
    DECREASE        reduce using rule 110 (value -> TEXT .)
    PLUS            reduce using rule 110 (value -> TEXT .)
    MINUS           reduce using rule 110 (value -> TEXT .)
    TIMES           reduce using rule 110 (value -> TEXT .)
    DIVIDE          reduce using rule 110 (value -> TEXT .)
    MODULUS         reduce using rule 110 (value -> TEXT .)
    LESS            reduce using rule 110 (value -> TEXT .)
    GREATER         reduce using rule 110 (value -> TEXT .)
    EQUAL_TO        reduce using rule 110 (value -> TEXT .)
    NOT_EQUAL_TO    reduce using rule 110 (value -> TEXT .)
    LESS_EQUAL      reduce using rule 110 (value -> TEXT .)
    GREATER_EQUAL   reduce using rule 110 (value -> TEXT .)
    AND             reduce using rule 110 (value -> TEXT .)
    OR              reduce using rule 110 (value -> TEXT .)
    RIGHT_SQ_BRACKET reduce using rule 110 (value -> TEXT .)
    RIGHT_PARENTHESIS reduce using rule 110 (value -> TEXT .)
    COMMA           reduce using rule 110 (value -> TEXT .)
    COLON           reduce using rule 110 (value -> TEXT .)


state 39

    (111) value -> CHARACTER .

    SEMICOLON       reduce using rule 111 (value -> CHARACTER .)
    PERIOD          reduce using rule 111 (value -> CHARACTER .)
    INCREASE        reduce using rule 111 (value -> CHARACTER .)
    DECREASE        reduce using rule 111 (value -> CHARACTER .)
    PLUS            reduce using rule 111 (value -> CHARACTER .)
    MINUS           reduce using rule 111 (value -> CHARACTER .)
    TIMES           reduce using rule 111 (value -> CHARACTER .)
    DIVIDE          reduce using rule 111 (value -> CHARACTER .)
    MODULUS         reduce using rule 111 (value -> CHARACTER .)
    LESS            reduce using rule 111 (value -> CHARACTER .)
    GREATER         reduce using rule 111 (value -> CHARACTER .)
    EQUAL_TO        reduce using rule 111 (value -> CHARACTER .)
    NOT_EQUAL_TO    reduce using rule 111 (value -> CHARACTER .)
    LESS_EQUAL      reduce using rule 111 (value -> CHARACTER .)
    GREATER_EQUAL   reduce using rule 111 (value -> CHARACTER .)
    AND             reduce using rule 111 (value -> CHARACTER .)
    OR              reduce using rule 111 (value -> CHARACTER .)
    RIGHT_SQ_BRACKET reduce using rule 111 (value -> CHARACTER .)
    RIGHT_PARENTHESIS reduce using rule 111 (value -> CHARACTER .)
    COMMA           reduce using rule 111 (value -> CHARACTER .)
    COLON           reduce using rule 111 (value -> CHARACTER .)


state 40

    (112) value -> BOOL .

    SEMICOLON       reduce using rule 112 (value -> BOOL .)
    PERIOD          reduce using rule 112 (value -> BOOL .)
    INCREASE        reduce using rule 112 (value -> BOOL .)
    DECREASE        reduce using rule 112 (value -> BOOL .)
    PLUS            reduce using rule 112 (value -> BOOL .)
    MINUS           reduce using rule 112 (value -> BOOL .)
    TIMES           reduce using rule 112 (value -> BOOL .)
    DIVIDE          reduce using rule 112 (value -> BOOL .)
    MODULUS         reduce using rule 112 (value -> BOOL .)
    LESS            reduce using rule 112 (value -> BOOL .)
    GREATER         reduce using rule 112 (value -> BOOL .)
    EQUAL_TO        reduce using rule 112 (value -> BOOL .)
    NOT_EQUAL_TO    reduce using rule 112 (value -> BOOL .)
    LESS_EQUAL      reduce using rule 112 (value -> BOOL .)
    GREATER_EQUAL   reduce using rule 112 (value -> BOOL .)
    AND             reduce using rule 112 (value -> BOOL .)
    OR              reduce using rule 112 (value -> BOOL .)
    RIGHT_SQ_BRACKET reduce using rule 112 (value -> BOOL .)
    RIGHT_PARENTHESIS reduce using rule 112 (value -> BOOL .)
    COMMA           reduce using rule 112 (value -> BOOL .)
    COLON           reduce using rule 112 (value -> BOOL .)


state 41

    (113) value -> NULL .

    SEMICOLON       reduce using rule 113 (value -> NULL .)
    PERIOD          reduce using rule 113 (value -> NULL .)
    INCREASE        reduce using rule 113 (value -> NULL .)
    DECREASE        reduce using rule 113 (value -> NULL .)
    PLUS            reduce using rule 113 (value -> NULL .)
    MINUS           reduce using rule 113 (value -> NULL .)
    TIMES           reduce using rule 113 (value -> NULL .)
    DIVIDE          reduce using rule 113 (value -> NULL .)
    MODULUS         reduce using rule 113 (value -> NULL .)
    LESS            reduce using rule 113 (value -> NULL .)
    GREATER         reduce using rule 113 (value -> NULL .)
    EQUAL_TO        reduce using rule 113 (value -> NULL .)
    NOT_EQUAL_TO    reduce using rule 113 (value -> NULL .)
    LESS_EQUAL      reduce using rule 113 (value -> NULL .)
    GREATER_EQUAL   reduce using rule 113 (value -> NULL .)
    AND             reduce using rule 113 (value -> NULL .)
    OR              reduce using rule 113 (value -> NULL .)
    RIGHT_SQ_BRACKET reduce using rule 113 (value -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 113 (value -> NULL .)
    COMMA           reduce using rule 113 (value -> NULL .)
    COLON           reduce using rule 113 (value -> NULL .)


state 42

    (2) block -> block instruction .

    ID              reduce using rule 2 (block -> block instruction .)
    IF              reduce using rule 2 (block -> block instruction .)
    SWITCH          reduce using rule 2 (block -> block instruction .)
    WHILE           reduce using rule 2 (block -> block instruction .)
    FOR             reduce using rule 2 (block -> block instruction .)
    FUNCTION        reduce using rule 2 (block -> block instruction .)
    PARSEINT        reduce using rule 2 (block -> block instruction .)
    PARSEFLOAT      reduce using rule 2 (block -> block instruction .)
    TYPEOF          reduce using rule 2 (block -> block instruction .)
    BREAK           reduce using rule 2 (block -> block instruction .)
    CONTINUE        reduce using rule 2 (block -> block instruction .)
    RETURN          reduce using rule 2 (block -> block instruction .)
    CONSOLE         reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    CONST           reduce using rule 2 (block -> block instruction .)
    INTEGER         reduce using rule 2 (block -> block instruction .)
    DECIMAL         reduce using rule 2 (block -> block instruction .)
    TEXT            reduce using rule 2 (block -> block instruction .)
    CHARACTER       reduce using rule 2 (block -> block instruction .)
    BOOL            reduce using rule 2 (block -> block instruction .)
    NULL            reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (block -> block instruction .)
    CASE            reduce using rule 2 (block -> block instruction .)
    DEFAULT         reduce using rule 2 (block -> block instruction .)


state 43

    (12) instruction -> methods SEMICOLON .

    ID              reduce using rule 12 (instruction -> methods SEMICOLON .)
    IF              reduce using rule 12 (instruction -> methods SEMICOLON .)
    SWITCH          reduce using rule 12 (instruction -> methods SEMICOLON .)
    WHILE           reduce using rule 12 (instruction -> methods SEMICOLON .)
    FOR             reduce using rule 12 (instruction -> methods SEMICOLON .)
    FUNCTION        reduce using rule 12 (instruction -> methods SEMICOLON .)
    PARSEINT        reduce using rule 12 (instruction -> methods SEMICOLON .)
    PARSEFLOAT      reduce using rule 12 (instruction -> methods SEMICOLON .)
    TYPEOF          reduce using rule 12 (instruction -> methods SEMICOLON .)
    BREAK           reduce using rule 12 (instruction -> methods SEMICOLON .)
    CONTINUE        reduce using rule 12 (instruction -> methods SEMICOLON .)
    RETURN          reduce using rule 12 (instruction -> methods SEMICOLON .)
    CONSOLE         reduce using rule 12 (instruction -> methods SEMICOLON .)
    VAR             reduce using rule 12 (instruction -> methods SEMICOLON .)
    CONST           reduce using rule 12 (instruction -> methods SEMICOLON .)
    INTEGER         reduce using rule 12 (instruction -> methods SEMICOLON .)
    DECIMAL         reduce using rule 12 (instruction -> methods SEMICOLON .)
    TEXT            reduce using rule 12 (instruction -> methods SEMICOLON .)
    CHARACTER       reduce using rule 12 (instruction -> methods SEMICOLON .)
    BOOL            reduce using rule 12 (instruction -> methods SEMICOLON .)
    NULL            reduce using rule 12 (instruction -> methods SEMICOLON .)
    $end            reduce using rule 12 (instruction -> methods SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (instruction -> methods SEMICOLON .)
    CASE            reduce using rule 12 (instruction -> methods SEMICOLON .)
    DEFAULT         reduce using rule 12 (instruction -> methods SEMICOLON .)


state 44

    (53) methods -> methods PERIOD . name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> methods PERIOD . name_method expression
    (55) methods -> methods PERIOD . name_method
    (58) name_method -> . TOSTRING
    (59) name_method -> . TOLOWERCASE
    (60) name_method -> . TOUPPERCASE
    (61) name_method -> . PUSH
    (62) name_method -> . POP
    (63) name_method -> . INDEXOF
    (64) name_method -> . JOIN
    (65) name_method -> . LENGTH

    TOSTRING        shift and go to state 78
    TOLOWERCASE     shift and go to state 79
    TOUPPERCASE     shift and go to state 80
    PUSH            shift and go to state 81
    POP             shift and go to state 82
    INDEXOF         shift and go to state 83
    JOIN            shift and go to state 84
    LENGTH          shift and go to state 85

    name_method                    shift and go to state 77

state 45

    (13) instruction -> call_function SEMICOLON .

    ID              reduce using rule 13 (instruction -> call_function SEMICOLON .)
    IF              reduce using rule 13 (instruction -> call_function SEMICOLON .)
    SWITCH          reduce using rule 13 (instruction -> call_function SEMICOLON .)
    WHILE           reduce using rule 13 (instruction -> call_function SEMICOLON .)
    FOR             reduce using rule 13 (instruction -> call_function SEMICOLON .)
    FUNCTION        reduce using rule 13 (instruction -> call_function SEMICOLON .)
    PARSEINT        reduce using rule 13 (instruction -> call_function SEMICOLON .)
    PARSEFLOAT      reduce using rule 13 (instruction -> call_function SEMICOLON .)
    TYPEOF          reduce using rule 13 (instruction -> call_function SEMICOLON .)
    BREAK           reduce using rule 13 (instruction -> call_function SEMICOLON .)
    CONTINUE        reduce using rule 13 (instruction -> call_function SEMICOLON .)
    RETURN          reduce using rule 13 (instruction -> call_function SEMICOLON .)
    CONSOLE         reduce using rule 13 (instruction -> call_function SEMICOLON .)
    VAR             reduce using rule 13 (instruction -> call_function SEMICOLON .)
    CONST           reduce using rule 13 (instruction -> call_function SEMICOLON .)
    INTEGER         reduce using rule 13 (instruction -> call_function SEMICOLON .)
    DECIMAL         reduce using rule 13 (instruction -> call_function SEMICOLON .)
    TEXT            reduce using rule 13 (instruction -> call_function SEMICOLON .)
    CHARACTER       reduce using rule 13 (instruction -> call_function SEMICOLON .)
    BOOL            reduce using rule 13 (instruction -> call_function SEMICOLON .)
    NULL            reduce using rule 13 (instruction -> call_function SEMICOLON .)
    $end            reduce using rule 13 (instruction -> call_function SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (instruction -> call_function SEMICOLON .)
    CASE            reduce using rule 13 (instruction -> call_function SEMICOLON .)
    DEFAULT         reduce using rule 13 (instruction -> call_function SEMICOLON .)


state 46

    (18) declaration -> symbol_type ID . COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID . COLON data_type SEMICOLON
    (20) declaration -> symbol_type ID . EQUAL expression SEMICOLON
    (70) declaration_array -> symbol_type ID . COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    COLON           shift and go to state 86
    EQUAL           shift and go to state 87


state 47

    (21) assignment -> ID EQUAL . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 88
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 48

    (22) assignment -> ID ADITION . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 89
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 49

    (23) assignment -> ID SUBTRACTION . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 90
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 50

    (71) assignment -> ID LEFT_SQ_BRACKET . expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (72) access_array -> ID LEFT_SQ_BRACKET . expression RIGHT_SQ_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 91
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 51

    (51) call_function -> ID LEFT_PARENTHESIS . expression_list RIGHT_PARENTHESIS
    (52) call_function -> ID LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (73) expression_list -> . expression_list COMMA expression
    (74) expression_list -> . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_PARENTHESIS shift and go to state 93
    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression_list                shift and go to state 92
    expression                     shift and go to state 94
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 52

    (24) if -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 95
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 53

    (31) switch -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 96
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 54

    (36) while -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 97
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 55

    (37) for -> FOR LEFT_PARENTHESIS . declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> FOR LEFT_PARENTHESIS . symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST

    VAR             shift and go to state 34
    CONST           shift and go to state 35

    declaration                    shift and go to state 98
    symbol_type                    shift and go to state 99

state 56

    (41) function -> FUNCTION ID . LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> FUNCTION ID . LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> FUNCTION ID . LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> FUNCTION ID . LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 100


state 57

    (67) methods -> PARSEINT expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 67 (methods -> PARSEINT expression .)
    PERIOD          reduce using rule 67 (methods -> PARSEINT expression .)
    RIGHT_SQ_BRACKET reduce using rule 67 (methods -> PARSEINT expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (methods -> PARSEINT expression .)
    COMMA           reduce using rule 67 (methods -> PARSEINT expression .)
    COLON           reduce using rule 67 (methods -> PARSEINT expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115

  ! INCREASE        [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! DECREASE        [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! PLUS            [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! MINUS           [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! TIMES           [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! DIVIDE          [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! MODULUS         [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! LESS            [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! GREATER         [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! EQUAL_TO        [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! AND             [ reduce using rule 67 (methods -> PARSEINT expression .) ]
  ! OR              [ reduce using rule 67 (methods -> PARSEINT expression .) ]


state 58

    (75) expression -> expression_unary .

    INCREASE        reduce using rule 75 (expression -> expression_unary .)
    DECREASE        reduce using rule 75 (expression -> expression_unary .)
    PLUS            reduce using rule 75 (expression -> expression_unary .)
    MINUS           reduce using rule 75 (expression -> expression_unary .)
    TIMES           reduce using rule 75 (expression -> expression_unary .)
    DIVIDE          reduce using rule 75 (expression -> expression_unary .)
    MODULUS         reduce using rule 75 (expression -> expression_unary .)
    LESS            reduce using rule 75 (expression -> expression_unary .)
    GREATER         reduce using rule 75 (expression -> expression_unary .)
    EQUAL_TO        reduce using rule 75 (expression -> expression_unary .)
    NOT_EQUAL_TO    reduce using rule 75 (expression -> expression_unary .)
    LESS_EQUAL      reduce using rule 75 (expression -> expression_unary .)
    GREATER_EQUAL   reduce using rule 75 (expression -> expression_unary .)
    AND             reduce using rule 75 (expression -> expression_unary .)
    OR              reduce using rule 75 (expression -> expression_unary .)
    SEMICOLON       reduce using rule 75 (expression -> expression_unary .)
    PERIOD          reduce using rule 75 (expression -> expression_unary .)
    RIGHT_SQ_BRACKET reduce using rule 75 (expression -> expression_unary .)
    RIGHT_PARENTHESIS reduce using rule 75 (expression -> expression_unary .)
    COMMA           reduce using rule 75 (expression -> expression_unary .)
    COLON           reduce using rule 75 (expression -> expression_unary .)


state 59

    (76) expression -> expression_binary .

    INCREASE        reduce using rule 76 (expression -> expression_binary .)
    DECREASE        reduce using rule 76 (expression -> expression_binary .)
    PLUS            reduce using rule 76 (expression -> expression_binary .)
    MINUS           reduce using rule 76 (expression -> expression_binary .)
    TIMES           reduce using rule 76 (expression -> expression_binary .)
    DIVIDE          reduce using rule 76 (expression -> expression_binary .)
    MODULUS         reduce using rule 76 (expression -> expression_binary .)
    LESS            reduce using rule 76 (expression -> expression_binary .)
    GREATER         reduce using rule 76 (expression -> expression_binary .)
    EQUAL_TO        reduce using rule 76 (expression -> expression_binary .)
    NOT_EQUAL_TO    reduce using rule 76 (expression -> expression_binary .)
    LESS_EQUAL      reduce using rule 76 (expression -> expression_binary .)
    GREATER_EQUAL   reduce using rule 76 (expression -> expression_binary .)
    AND             reduce using rule 76 (expression -> expression_binary .)
    OR              reduce using rule 76 (expression -> expression_binary .)
    SEMICOLON       reduce using rule 76 (expression -> expression_binary .)
    PERIOD          reduce using rule 76 (expression -> expression_binary .)
    RIGHT_SQ_BRACKET reduce using rule 76 (expression -> expression_binary .)
    RIGHT_PARENTHESIS reduce using rule 76 (expression -> expression_binary .)
    COMMA           reduce using rule 76 (expression -> expression_binary .)
    COLON           reduce using rule 76 (expression -> expression_binary .)


state 60

    (77) expression -> expression_group .

    INCREASE        reduce using rule 77 (expression -> expression_group .)
    DECREASE        reduce using rule 77 (expression -> expression_group .)
    PLUS            reduce using rule 77 (expression -> expression_group .)
    MINUS           reduce using rule 77 (expression -> expression_group .)
    TIMES           reduce using rule 77 (expression -> expression_group .)
    DIVIDE          reduce using rule 77 (expression -> expression_group .)
    MODULUS         reduce using rule 77 (expression -> expression_group .)
    LESS            reduce using rule 77 (expression -> expression_group .)
    GREATER         reduce using rule 77 (expression -> expression_group .)
    EQUAL_TO        reduce using rule 77 (expression -> expression_group .)
    NOT_EQUAL_TO    reduce using rule 77 (expression -> expression_group .)
    LESS_EQUAL      reduce using rule 77 (expression -> expression_group .)
    GREATER_EQUAL   reduce using rule 77 (expression -> expression_group .)
    AND             reduce using rule 77 (expression -> expression_group .)
    OR              reduce using rule 77 (expression -> expression_group .)
    SEMICOLON       reduce using rule 77 (expression -> expression_group .)
    PERIOD          reduce using rule 77 (expression -> expression_group .)
    RIGHT_SQ_BRACKET reduce using rule 77 (expression -> expression_group .)
    RIGHT_PARENTHESIS reduce using rule 77 (expression -> expression_group .)
    COMMA           reduce using rule 77 (expression -> expression_group .)
    COLON           reduce using rule 77 (expression -> expression_group .)


state 61

    (78) expression -> methods .
    (53) methods -> methods . PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> methods . PERIOD name_method expression
    (55) methods -> methods . PERIOD name_method

  ! shift/reduce conflict for PERIOD resolved as shift
    INCREASE        reduce using rule 78 (expression -> methods .)
    DECREASE        reduce using rule 78 (expression -> methods .)
    PLUS            reduce using rule 78 (expression -> methods .)
    MINUS           reduce using rule 78 (expression -> methods .)
    TIMES           reduce using rule 78 (expression -> methods .)
    DIVIDE          reduce using rule 78 (expression -> methods .)
    MODULUS         reduce using rule 78 (expression -> methods .)
    LESS            reduce using rule 78 (expression -> methods .)
    GREATER         reduce using rule 78 (expression -> methods .)
    EQUAL_TO        reduce using rule 78 (expression -> methods .)
    NOT_EQUAL_TO    reduce using rule 78 (expression -> methods .)
    LESS_EQUAL      reduce using rule 78 (expression -> methods .)
    GREATER_EQUAL   reduce using rule 78 (expression -> methods .)
    AND             reduce using rule 78 (expression -> methods .)
    OR              reduce using rule 78 (expression -> methods .)
    SEMICOLON       reduce using rule 78 (expression -> methods .)
    RIGHT_SQ_BRACKET reduce using rule 78 (expression -> methods .)
    RIGHT_PARENTHESIS reduce using rule 78 (expression -> methods .)
    COMMA           reduce using rule 78 (expression -> methods .)
    COLON           reduce using rule 78 (expression -> methods .)
    PERIOD          shift and go to state 44

  ! PERIOD          [ reduce using rule 78 (expression -> methods .) ]


state 62

    (79) expression -> call_function .

    INCREASE        reduce using rule 79 (expression -> call_function .)
    DECREASE        reduce using rule 79 (expression -> call_function .)
    PLUS            reduce using rule 79 (expression -> call_function .)
    MINUS           reduce using rule 79 (expression -> call_function .)
    TIMES           reduce using rule 79 (expression -> call_function .)
    DIVIDE          reduce using rule 79 (expression -> call_function .)
    MODULUS         reduce using rule 79 (expression -> call_function .)
    LESS            reduce using rule 79 (expression -> call_function .)
    GREATER         reduce using rule 79 (expression -> call_function .)
    EQUAL_TO        reduce using rule 79 (expression -> call_function .)
    NOT_EQUAL_TO    reduce using rule 79 (expression -> call_function .)
    LESS_EQUAL      reduce using rule 79 (expression -> call_function .)
    GREATER_EQUAL   reduce using rule 79 (expression -> call_function .)
    AND             reduce using rule 79 (expression -> call_function .)
    OR              reduce using rule 79 (expression -> call_function .)
    SEMICOLON       reduce using rule 79 (expression -> call_function .)
    PERIOD          reduce using rule 79 (expression -> call_function .)
    RIGHT_SQ_BRACKET reduce using rule 79 (expression -> call_function .)
    RIGHT_PARENTHESIS reduce using rule 79 (expression -> call_function .)
    COMMA           reduce using rule 79 (expression -> call_function .)
    COLON           reduce using rule 79 (expression -> call_function .)


state 63

    (80) expression_unary -> MINUS . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 116
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 64

    (81) expression_unary -> NOT . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 117
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 65

    (84) expression_binary -> arithmetic .

    INCREASE        reduce using rule 84 (expression_binary -> arithmetic .)
    DECREASE        reduce using rule 84 (expression_binary -> arithmetic .)
    PLUS            reduce using rule 84 (expression_binary -> arithmetic .)
    MINUS           reduce using rule 84 (expression_binary -> arithmetic .)
    TIMES           reduce using rule 84 (expression_binary -> arithmetic .)
    DIVIDE          reduce using rule 84 (expression_binary -> arithmetic .)
    MODULUS         reduce using rule 84 (expression_binary -> arithmetic .)
    LESS            reduce using rule 84 (expression_binary -> arithmetic .)
    GREATER         reduce using rule 84 (expression_binary -> arithmetic .)
    EQUAL_TO        reduce using rule 84 (expression_binary -> arithmetic .)
    NOT_EQUAL_TO    reduce using rule 84 (expression_binary -> arithmetic .)
    LESS_EQUAL      reduce using rule 84 (expression_binary -> arithmetic .)
    GREATER_EQUAL   reduce using rule 84 (expression_binary -> arithmetic .)
    AND             reduce using rule 84 (expression_binary -> arithmetic .)
    OR              reduce using rule 84 (expression_binary -> arithmetic .)
    SEMICOLON       reduce using rule 84 (expression_binary -> arithmetic .)
    PERIOD          reduce using rule 84 (expression_binary -> arithmetic .)
    RIGHT_SQ_BRACKET reduce using rule 84 (expression_binary -> arithmetic .)
    RIGHT_PARENTHESIS reduce using rule 84 (expression_binary -> arithmetic .)
    COMMA           reduce using rule 84 (expression_binary -> arithmetic .)
    COLON           reduce using rule 84 (expression_binary -> arithmetic .)


state 66

    (85) expression_binary -> relational .

    INCREASE        reduce using rule 85 (expression_binary -> relational .)
    DECREASE        reduce using rule 85 (expression_binary -> relational .)
    PLUS            reduce using rule 85 (expression_binary -> relational .)
    MINUS           reduce using rule 85 (expression_binary -> relational .)
    TIMES           reduce using rule 85 (expression_binary -> relational .)
    DIVIDE          reduce using rule 85 (expression_binary -> relational .)
    MODULUS         reduce using rule 85 (expression_binary -> relational .)
    LESS            reduce using rule 85 (expression_binary -> relational .)
    GREATER         reduce using rule 85 (expression_binary -> relational .)
    EQUAL_TO        reduce using rule 85 (expression_binary -> relational .)
    NOT_EQUAL_TO    reduce using rule 85 (expression_binary -> relational .)
    LESS_EQUAL      reduce using rule 85 (expression_binary -> relational .)
    GREATER_EQUAL   reduce using rule 85 (expression_binary -> relational .)
    AND             reduce using rule 85 (expression_binary -> relational .)
    OR              reduce using rule 85 (expression_binary -> relational .)
    SEMICOLON       reduce using rule 85 (expression_binary -> relational .)
    PERIOD          reduce using rule 85 (expression_binary -> relational .)
    RIGHT_SQ_BRACKET reduce using rule 85 (expression_binary -> relational .)
    RIGHT_PARENTHESIS reduce using rule 85 (expression_binary -> relational .)
    COMMA           reduce using rule 85 (expression_binary -> relational .)
    COLON           reduce using rule 85 (expression_binary -> relational .)


state 67

    (86) expression_binary -> logical .

    INCREASE        reduce using rule 86 (expression_binary -> logical .)
    DECREASE        reduce using rule 86 (expression_binary -> logical .)
    PLUS            reduce using rule 86 (expression_binary -> logical .)
    MINUS           reduce using rule 86 (expression_binary -> logical .)
    TIMES           reduce using rule 86 (expression_binary -> logical .)
    DIVIDE          reduce using rule 86 (expression_binary -> logical .)
    MODULUS         reduce using rule 86 (expression_binary -> logical .)
    LESS            reduce using rule 86 (expression_binary -> logical .)
    GREATER         reduce using rule 86 (expression_binary -> logical .)
    EQUAL_TO        reduce using rule 86 (expression_binary -> logical .)
    NOT_EQUAL_TO    reduce using rule 86 (expression_binary -> logical .)
    LESS_EQUAL      reduce using rule 86 (expression_binary -> logical .)
    GREATER_EQUAL   reduce using rule 86 (expression_binary -> logical .)
    AND             reduce using rule 86 (expression_binary -> logical .)
    OR              reduce using rule 86 (expression_binary -> logical .)
    SEMICOLON       reduce using rule 86 (expression_binary -> logical .)
    PERIOD          reduce using rule 86 (expression_binary -> logical .)
    RIGHT_SQ_BRACKET reduce using rule 86 (expression_binary -> logical .)
    RIGHT_PARENTHESIS reduce using rule 86 (expression_binary -> logical .)
    COMMA           reduce using rule 86 (expression_binary -> logical .)
    COLON           reduce using rule 86 (expression_binary -> logical .)


state 68

    (100) expression_group -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 118
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 69

    (51) call_function -> ID . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> ID . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (72) access_array -> ID . LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (114) value -> ID .

    LEFT_PARENTHESIS shift and go to state 51
    LEFT_SQ_BRACKET shift and go to state 119
    INCREASE        reduce using rule 114 (value -> ID .)
    DECREASE        reduce using rule 114 (value -> ID .)
    PLUS            reduce using rule 114 (value -> ID .)
    MINUS           reduce using rule 114 (value -> ID .)
    TIMES           reduce using rule 114 (value -> ID .)
    DIVIDE          reduce using rule 114 (value -> ID .)
    MODULUS         reduce using rule 114 (value -> ID .)
    LESS            reduce using rule 114 (value -> ID .)
    GREATER         reduce using rule 114 (value -> ID .)
    EQUAL_TO        reduce using rule 114 (value -> ID .)
    NOT_EQUAL_TO    reduce using rule 114 (value -> ID .)
    LESS_EQUAL      reduce using rule 114 (value -> ID .)
    GREATER_EQUAL   reduce using rule 114 (value -> ID .)
    AND             reduce using rule 114 (value -> ID .)
    OR              reduce using rule 114 (value -> ID .)
    SEMICOLON       reduce using rule 114 (value -> ID .)
    PERIOD          reduce using rule 114 (value -> ID .)
    RIGHT_SQ_BRACKET reduce using rule 114 (value -> ID .)
    RIGHT_PARENTHESIS reduce using rule 114 (value -> ID .)
    COMMA           reduce using rule 114 (value -> ID .)
    COLON           reduce using rule 114 (value -> ID .)


state 70

    (68) methods -> PARSEFLOAT expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 68 (methods -> PARSEFLOAT expression .)
    PERIOD          reduce using rule 68 (methods -> PARSEFLOAT expression .)
    RIGHT_SQ_BRACKET reduce using rule 68 (methods -> PARSEFLOAT expression .)
    RIGHT_PARENTHESIS reduce using rule 68 (methods -> PARSEFLOAT expression .)
    COMMA           reduce using rule 68 (methods -> PARSEFLOAT expression .)
    COLON           reduce using rule 68 (methods -> PARSEFLOAT expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115

  ! INCREASE        [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! DECREASE        [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! PLUS            [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! MINUS           [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! TIMES           [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! DIVIDE          [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! MODULUS         [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! LESS            [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! GREATER         [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! EQUAL_TO        [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! AND             [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]
  ! OR              [ reduce using rule 68 (methods -> PARSEFLOAT expression .) ]


state 71

    (69) methods -> TYPEOF expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 69 (methods -> TYPEOF expression .)
    PERIOD          reduce using rule 69 (methods -> TYPEOF expression .)
    RIGHT_SQ_BRACKET reduce using rule 69 (methods -> TYPEOF expression .)
    RIGHT_PARENTHESIS reduce using rule 69 (methods -> TYPEOF expression .)
    COMMA           reduce using rule 69 (methods -> TYPEOF expression .)
    COLON           reduce using rule 69 (methods -> TYPEOF expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115

  ! INCREASE        [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! DECREASE        [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! PLUS            [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! MINUS           [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! TIMES           [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! DIVIDE          [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! MODULUS         [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! LESS            [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! GREATER         [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! EQUAL_TO        [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! LESS_EQUAL      [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! AND             [ reduce using rule 69 (methods -> TYPEOF expression .) ]
  ! OR              [ reduce using rule 69 (methods -> TYPEOF expression .) ]


state 72

    (39) break -> BREAK SEMICOLON .

    ID              reduce using rule 39 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 39 (break -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 39 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 39 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 39 (break -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 39 (break -> BREAK SEMICOLON .)
    PARSEINT        reduce using rule 39 (break -> BREAK SEMICOLON .)
    PARSEFLOAT      reduce using rule 39 (break -> BREAK SEMICOLON .)
    TYPEOF          reduce using rule 39 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 39 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 39 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 39 (break -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 39 (break -> BREAK SEMICOLON .)
    VAR             reduce using rule 39 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 39 (break -> BREAK SEMICOLON .)
    INTEGER         reduce using rule 39 (break -> BREAK SEMICOLON .)
    DECIMAL         reduce using rule 39 (break -> BREAK SEMICOLON .)
    TEXT            reduce using rule 39 (break -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 39 (break -> BREAK SEMICOLON .)
    BOOL            reduce using rule 39 (break -> BREAK SEMICOLON .)
    NULL            reduce using rule 39 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 39 (break -> BREAK SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (break -> BREAK SEMICOLON .)
    CASE            reduce using rule 39 (break -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 39 (break -> BREAK SEMICOLON .)


state 73

    (40) continue -> CONTINUE SEMICOLON .

    ID              reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    PARSEINT        reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    PARSEFLOAT      reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    TYPEOF          reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    INTEGER         reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    DECIMAL         reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    TEXT            reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 40 (continue -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 40 (continue -> CONTINUE SEMICOLON .)


state 74

    (49) return -> RETURN expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 120
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 75

    (50) return -> RETURN SEMICOLON .

    ID              reduce using rule 50 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 50 (return -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 50 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 50 (return -> RETURN SEMICOLON .)
    FOR             reduce using rule 50 (return -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 50 (return -> RETURN SEMICOLON .)
    PARSEINT        reduce using rule 50 (return -> RETURN SEMICOLON .)
    PARSEFLOAT      reduce using rule 50 (return -> RETURN SEMICOLON .)
    TYPEOF          reduce using rule 50 (return -> RETURN SEMICOLON .)
    BREAK           reduce using rule 50 (return -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 50 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 50 (return -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 50 (return -> RETURN SEMICOLON .)
    VAR             reduce using rule 50 (return -> RETURN SEMICOLON .)
    CONST           reduce using rule 50 (return -> RETURN SEMICOLON .)
    INTEGER         reduce using rule 50 (return -> RETURN SEMICOLON .)
    DECIMAL         reduce using rule 50 (return -> RETURN SEMICOLON .)
    TEXT            reduce using rule 50 (return -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 50 (return -> RETURN SEMICOLON .)
    BOOL            reduce using rule 50 (return -> RETURN SEMICOLON .)
    NULL            reduce using rule 50 (return -> RETURN SEMICOLON .)
    $end            reduce using rule 50 (return -> RETURN SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (return -> RETURN SEMICOLON .)
    CASE            reduce using rule 50 (return -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 50 (return -> RETURN SEMICOLON .)


state 76

    (66) print -> CONSOLE PERIOD . LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON

    LOG             shift and go to state 121


state 77

    (53) methods -> methods PERIOD name_method . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> methods PERIOD name_method . expression
    (55) methods -> methods PERIOD name_method .
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_PARENTHESIS shift and go to state 122
    SEMICOLON       reduce using rule 55 (methods -> methods PERIOD name_method .)
    PERIOD          reduce using rule 55 (methods -> methods PERIOD name_method .)
    INCREASE        reduce using rule 55 (methods -> methods PERIOD name_method .)
    DECREASE        reduce using rule 55 (methods -> methods PERIOD name_method .)
    PLUS            reduce using rule 55 (methods -> methods PERIOD name_method .)
    TIMES           reduce using rule 55 (methods -> methods PERIOD name_method .)
    DIVIDE          reduce using rule 55 (methods -> methods PERIOD name_method .)
    MODULUS         reduce using rule 55 (methods -> methods PERIOD name_method .)
    LESS            reduce using rule 55 (methods -> methods PERIOD name_method .)
    GREATER         reduce using rule 55 (methods -> methods PERIOD name_method .)
    EQUAL_TO        reduce using rule 55 (methods -> methods PERIOD name_method .)
    NOT_EQUAL_TO    reduce using rule 55 (methods -> methods PERIOD name_method .)
    LESS_EQUAL      reduce using rule 55 (methods -> methods PERIOD name_method .)
    GREATER_EQUAL   reduce using rule 55 (methods -> methods PERIOD name_method .)
    AND             reduce using rule 55 (methods -> methods PERIOD name_method .)
    OR              reduce using rule 55 (methods -> methods PERIOD name_method .)
    RIGHT_SQ_BRACKET reduce using rule 55 (methods -> methods PERIOD name_method .)
    RIGHT_PARENTHESIS reduce using rule 55 (methods -> methods PERIOD name_method .)
    COMMA           reduce using rule 55 (methods -> methods PERIOD name_method .)
    COLON           reduce using rule 55 (methods -> methods PERIOD name_method .)
    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

  ! MINUS           [ reduce using rule 55 (methods -> methods PERIOD name_method .) ]

    methods                        shift and go to state 61
    expression                     shift and go to state 123
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 78

    (58) name_method -> TOSTRING .

    LEFT_PARENTHESIS reduce using rule 58 (name_method -> TOSTRING .)
    MINUS           reduce using rule 58 (name_method -> TOSTRING .)
    NOT             reduce using rule 58 (name_method -> TOSTRING .)
    PARSEINT        reduce using rule 58 (name_method -> TOSTRING .)
    PARSEFLOAT      reduce using rule 58 (name_method -> TOSTRING .)
    TYPEOF          reduce using rule 58 (name_method -> TOSTRING .)
    ID              reduce using rule 58 (name_method -> TOSTRING .)
    INTEGER         reduce using rule 58 (name_method -> TOSTRING .)
    DECIMAL         reduce using rule 58 (name_method -> TOSTRING .)
    TEXT            reduce using rule 58 (name_method -> TOSTRING .)
    CHARACTER       reduce using rule 58 (name_method -> TOSTRING .)
    BOOL            reduce using rule 58 (name_method -> TOSTRING .)
    NULL            reduce using rule 58 (name_method -> TOSTRING .)
    SEMICOLON       reduce using rule 58 (name_method -> TOSTRING .)
    PERIOD          reduce using rule 58 (name_method -> TOSTRING .)
    INCREASE        reduce using rule 58 (name_method -> TOSTRING .)
    DECREASE        reduce using rule 58 (name_method -> TOSTRING .)
    PLUS            reduce using rule 58 (name_method -> TOSTRING .)
    TIMES           reduce using rule 58 (name_method -> TOSTRING .)
    DIVIDE          reduce using rule 58 (name_method -> TOSTRING .)
    MODULUS         reduce using rule 58 (name_method -> TOSTRING .)
    LESS            reduce using rule 58 (name_method -> TOSTRING .)
    GREATER         reduce using rule 58 (name_method -> TOSTRING .)
    EQUAL_TO        reduce using rule 58 (name_method -> TOSTRING .)
    NOT_EQUAL_TO    reduce using rule 58 (name_method -> TOSTRING .)
    LESS_EQUAL      reduce using rule 58 (name_method -> TOSTRING .)
    GREATER_EQUAL   reduce using rule 58 (name_method -> TOSTRING .)
    AND             reduce using rule 58 (name_method -> TOSTRING .)
    OR              reduce using rule 58 (name_method -> TOSTRING .)
    RIGHT_SQ_BRACKET reduce using rule 58 (name_method -> TOSTRING .)
    RIGHT_PARENTHESIS reduce using rule 58 (name_method -> TOSTRING .)
    COMMA           reduce using rule 58 (name_method -> TOSTRING .)
    COLON           reduce using rule 58 (name_method -> TOSTRING .)


state 79

    (59) name_method -> TOLOWERCASE .

    LEFT_PARENTHESIS reduce using rule 59 (name_method -> TOLOWERCASE .)
    MINUS           reduce using rule 59 (name_method -> TOLOWERCASE .)
    NOT             reduce using rule 59 (name_method -> TOLOWERCASE .)
    PARSEINT        reduce using rule 59 (name_method -> TOLOWERCASE .)
    PARSEFLOAT      reduce using rule 59 (name_method -> TOLOWERCASE .)
    TYPEOF          reduce using rule 59 (name_method -> TOLOWERCASE .)
    ID              reduce using rule 59 (name_method -> TOLOWERCASE .)
    INTEGER         reduce using rule 59 (name_method -> TOLOWERCASE .)
    DECIMAL         reduce using rule 59 (name_method -> TOLOWERCASE .)
    TEXT            reduce using rule 59 (name_method -> TOLOWERCASE .)
    CHARACTER       reduce using rule 59 (name_method -> TOLOWERCASE .)
    BOOL            reduce using rule 59 (name_method -> TOLOWERCASE .)
    NULL            reduce using rule 59 (name_method -> TOLOWERCASE .)
    SEMICOLON       reduce using rule 59 (name_method -> TOLOWERCASE .)
    PERIOD          reduce using rule 59 (name_method -> TOLOWERCASE .)
    INCREASE        reduce using rule 59 (name_method -> TOLOWERCASE .)
    DECREASE        reduce using rule 59 (name_method -> TOLOWERCASE .)
    PLUS            reduce using rule 59 (name_method -> TOLOWERCASE .)
    TIMES           reduce using rule 59 (name_method -> TOLOWERCASE .)
    DIVIDE          reduce using rule 59 (name_method -> TOLOWERCASE .)
    MODULUS         reduce using rule 59 (name_method -> TOLOWERCASE .)
    LESS            reduce using rule 59 (name_method -> TOLOWERCASE .)
    GREATER         reduce using rule 59 (name_method -> TOLOWERCASE .)
    EQUAL_TO        reduce using rule 59 (name_method -> TOLOWERCASE .)
    NOT_EQUAL_TO    reduce using rule 59 (name_method -> TOLOWERCASE .)
    LESS_EQUAL      reduce using rule 59 (name_method -> TOLOWERCASE .)
    GREATER_EQUAL   reduce using rule 59 (name_method -> TOLOWERCASE .)
    AND             reduce using rule 59 (name_method -> TOLOWERCASE .)
    OR              reduce using rule 59 (name_method -> TOLOWERCASE .)
    RIGHT_SQ_BRACKET reduce using rule 59 (name_method -> TOLOWERCASE .)
    RIGHT_PARENTHESIS reduce using rule 59 (name_method -> TOLOWERCASE .)
    COMMA           reduce using rule 59 (name_method -> TOLOWERCASE .)
    COLON           reduce using rule 59 (name_method -> TOLOWERCASE .)


state 80

    (60) name_method -> TOUPPERCASE .

    LEFT_PARENTHESIS reduce using rule 60 (name_method -> TOUPPERCASE .)
    MINUS           reduce using rule 60 (name_method -> TOUPPERCASE .)
    NOT             reduce using rule 60 (name_method -> TOUPPERCASE .)
    PARSEINT        reduce using rule 60 (name_method -> TOUPPERCASE .)
    PARSEFLOAT      reduce using rule 60 (name_method -> TOUPPERCASE .)
    TYPEOF          reduce using rule 60 (name_method -> TOUPPERCASE .)
    ID              reduce using rule 60 (name_method -> TOUPPERCASE .)
    INTEGER         reduce using rule 60 (name_method -> TOUPPERCASE .)
    DECIMAL         reduce using rule 60 (name_method -> TOUPPERCASE .)
    TEXT            reduce using rule 60 (name_method -> TOUPPERCASE .)
    CHARACTER       reduce using rule 60 (name_method -> TOUPPERCASE .)
    BOOL            reduce using rule 60 (name_method -> TOUPPERCASE .)
    NULL            reduce using rule 60 (name_method -> TOUPPERCASE .)
    SEMICOLON       reduce using rule 60 (name_method -> TOUPPERCASE .)
    PERIOD          reduce using rule 60 (name_method -> TOUPPERCASE .)
    INCREASE        reduce using rule 60 (name_method -> TOUPPERCASE .)
    DECREASE        reduce using rule 60 (name_method -> TOUPPERCASE .)
    PLUS            reduce using rule 60 (name_method -> TOUPPERCASE .)
    TIMES           reduce using rule 60 (name_method -> TOUPPERCASE .)
    DIVIDE          reduce using rule 60 (name_method -> TOUPPERCASE .)
    MODULUS         reduce using rule 60 (name_method -> TOUPPERCASE .)
    LESS            reduce using rule 60 (name_method -> TOUPPERCASE .)
    GREATER         reduce using rule 60 (name_method -> TOUPPERCASE .)
    EQUAL_TO        reduce using rule 60 (name_method -> TOUPPERCASE .)
    NOT_EQUAL_TO    reduce using rule 60 (name_method -> TOUPPERCASE .)
    LESS_EQUAL      reduce using rule 60 (name_method -> TOUPPERCASE .)
    GREATER_EQUAL   reduce using rule 60 (name_method -> TOUPPERCASE .)
    AND             reduce using rule 60 (name_method -> TOUPPERCASE .)
    OR              reduce using rule 60 (name_method -> TOUPPERCASE .)
    RIGHT_SQ_BRACKET reduce using rule 60 (name_method -> TOUPPERCASE .)
    RIGHT_PARENTHESIS reduce using rule 60 (name_method -> TOUPPERCASE .)
    COMMA           reduce using rule 60 (name_method -> TOUPPERCASE .)
    COLON           reduce using rule 60 (name_method -> TOUPPERCASE .)


state 81

    (61) name_method -> PUSH .

    LEFT_PARENTHESIS reduce using rule 61 (name_method -> PUSH .)
    MINUS           reduce using rule 61 (name_method -> PUSH .)
    NOT             reduce using rule 61 (name_method -> PUSH .)
    PARSEINT        reduce using rule 61 (name_method -> PUSH .)
    PARSEFLOAT      reduce using rule 61 (name_method -> PUSH .)
    TYPEOF          reduce using rule 61 (name_method -> PUSH .)
    ID              reduce using rule 61 (name_method -> PUSH .)
    INTEGER         reduce using rule 61 (name_method -> PUSH .)
    DECIMAL         reduce using rule 61 (name_method -> PUSH .)
    TEXT            reduce using rule 61 (name_method -> PUSH .)
    CHARACTER       reduce using rule 61 (name_method -> PUSH .)
    BOOL            reduce using rule 61 (name_method -> PUSH .)
    NULL            reduce using rule 61 (name_method -> PUSH .)
    SEMICOLON       reduce using rule 61 (name_method -> PUSH .)
    PERIOD          reduce using rule 61 (name_method -> PUSH .)
    INCREASE        reduce using rule 61 (name_method -> PUSH .)
    DECREASE        reduce using rule 61 (name_method -> PUSH .)
    PLUS            reduce using rule 61 (name_method -> PUSH .)
    TIMES           reduce using rule 61 (name_method -> PUSH .)
    DIVIDE          reduce using rule 61 (name_method -> PUSH .)
    MODULUS         reduce using rule 61 (name_method -> PUSH .)
    LESS            reduce using rule 61 (name_method -> PUSH .)
    GREATER         reduce using rule 61 (name_method -> PUSH .)
    EQUAL_TO        reduce using rule 61 (name_method -> PUSH .)
    NOT_EQUAL_TO    reduce using rule 61 (name_method -> PUSH .)
    LESS_EQUAL      reduce using rule 61 (name_method -> PUSH .)
    GREATER_EQUAL   reduce using rule 61 (name_method -> PUSH .)
    AND             reduce using rule 61 (name_method -> PUSH .)
    OR              reduce using rule 61 (name_method -> PUSH .)
    RIGHT_SQ_BRACKET reduce using rule 61 (name_method -> PUSH .)
    RIGHT_PARENTHESIS reduce using rule 61 (name_method -> PUSH .)
    COMMA           reduce using rule 61 (name_method -> PUSH .)
    COLON           reduce using rule 61 (name_method -> PUSH .)


state 82

    (62) name_method -> POP .

    LEFT_PARENTHESIS reduce using rule 62 (name_method -> POP .)
    MINUS           reduce using rule 62 (name_method -> POP .)
    NOT             reduce using rule 62 (name_method -> POP .)
    PARSEINT        reduce using rule 62 (name_method -> POP .)
    PARSEFLOAT      reduce using rule 62 (name_method -> POP .)
    TYPEOF          reduce using rule 62 (name_method -> POP .)
    ID              reduce using rule 62 (name_method -> POP .)
    INTEGER         reduce using rule 62 (name_method -> POP .)
    DECIMAL         reduce using rule 62 (name_method -> POP .)
    TEXT            reduce using rule 62 (name_method -> POP .)
    CHARACTER       reduce using rule 62 (name_method -> POP .)
    BOOL            reduce using rule 62 (name_method -> POP .)
    NULL            reduce using rule 62 (name_method -> POP .)
    SEMICOLON       reduce using rule 62 (name_method -> POP .)
    PERIOD          reduce using rule 62 (name_method -> POP .)
    INCREASE        reduce using rule 62 (name_method -> POP .)
    DECREASE        reduce using rule 62 (name_method -> POP .)
    PLUS            reduce using rule 62 (name_method -> POP .)
    TIMES           reduce using rule 62 (name_method -> POP .)
    DIVIDE          reduce using rule 62 (name_method -> POP .)
    MODULUS         reduce using rule 62 (name_method -> POP .)
    LESS            reduce using rule 62 (name_method -> POP .)
    GREATER         reduce using rule 62 (name_method -> POP .)
    EQUAL_TO        reduce using rule 62 (name_method -> POP .)
    NOT_EQUAL_TO    reduce using rule 62 (name_method -> POP .)
    LESS_EQUAL      reduce using rule 62 (name_method -> POP .)
    GREATER_EQUAL   reduce using rule 62 (name_method -> POP .)
    AND             reduce using rule 62 (name_method -> POP .)
    OR              reduce using rule 62 (name_method -> POP .)
    RIGHT_SQ_BRACKET reduce using rule 62 (name_method -> POP .)
    RIGHT_PARENTHESIS reduce using rule 62 (name_method -> POP .)
    COMMA           reduce using rule 62 (name_method -> POP .)
    COLON           reduce using rule 62 (name_method -> POP .)


state 83

    (63) name_method -> INDEXOF .

    LEFT_PARENTHESIS reduce using rule 63 (name_method -> INDEXOF .)
    MINUS           reduce using rule 63 (name_method -> INDEXOF .)
    NOT             reduce using rule 63 (name_method -> INDEXOF .)
    PARSEINT        reduce using rule 63 (name_method -> INDEXOF .)
    PARSEFLOAT      reduce using rule 63 (name_method -> INDEXOF .)
    TYPEOF          reduce using rule 63 (name_method -> INDEXOF .)
    ID              reduce using rule 63 (name_method -> INDEXOF .)
    INTEGER         reduce using rule 63 (name_method -> INDEXOF .)
    DECIMAL         reduce using rule 63 (name_method -> INDEXOF .)
    TEXT            reduce using rule 63 (name_method -> INDEXOF .)
    CHARACTER       reduce using rule 63 (name_method -> INDEXOF .)
    BOOL            reduce using rule 63 (name_method -> INDEXOF .)
    NULL            reduce using rule 63 (name_method -> INDEXOF .)
    SEMICOLON       reduce using rule 63 (name_method -> INDEXOF .)
    PERIOD          reduce using rule 63 (name_method -> INDEXOF .)
    INCREASE        reduce using rule 63 (name_method -> INDEXOF .)
    DECREASE        reduce using rule 63 (name_method -> INDEXOF .)
    PLUS            reduce using rule 63 (name_method -> INDEXOF .)
    TIMES           reduce using rule 63 (name_method -> INDEXOF .)
    DIVIDE          reduce using rule 63 (name_method -> INDEXOF .)
    MODULUS         reduce using rule 63 (name_method -> INDEXOF .)
    LESS            reduce using rule 63 (name_method -> INDEXOF .)
    GREATER         reduce using rule 63 (name_method -> INDEXOF .)
    EQUAL_TO        reduce using rule 63 (name_method -> INDEXOF .)
    NOT_EQUAL_TO    reduce using rule 63 (name_method -> INDEXOF .)
    LESS_EQUAL      reduce using rule 63 (name_method -> INDEXOF .)
    GREATER_EQUAL   reduce using rule 63 (name_method -> INDEXOF .)
    AND             reduce using rule 63 (name_method -> INDEXOF .)
    OR              reduce using rule 63 (name_method -> INDEXOF .)
    RIGHT_SQ_BRACKET reduce using rule 63 (name_method -> INDEXOF .)
    RIGHT_PARENTHESIS reduce using rule 63 (name_method -> INDEXOF .)
    COMMA           reduce using rule 63 (name_method -> INDEXOF .)
    COLON           reduce using rule 63 (name_method -> INDEXOF .)


state 84

    (64) name_method -> JOIN .

    LEFT_PARENTHESIS reduce using rule 64 (name_method -> JOIN .)
    MINUS           reduce using rule 64 (name_method -> JOIN .)
    NOT             reduce using rule 64 (name_method -> JOIN .)
    PARSEINT        reduce using rule 64 (name_method -> JOIN .)
    PARSEFLOAT      reduce using rule 64 (name_method -> JOIN .)
    TYPEOF          reduce using rule 64 (name_method -> JOIN .)
    ID              reduce using rule 64 (name_method -> JOIN .)
    INTEGER         reduce using rule 64 (name_method -> JOIN .)
    DECIMAL         reduce using rule 64 (name_method -> JOIN .)
    TEXT            reduce using rule 64 (name_method -> JOIN .)
    CHARACTER       reduce using rule 64 (name_method -> JOIN .)
    BOOL            reduce using rule 64 (name_method -> JOIN .)
    NULL            reduce using rule 64 (name_method -> JOIN .)
    SEMICOLON       reduce using rule 64 (name_method -> JOIN .)
    PERIOD          reduce using rule 64 (name_method -> JOIN .)
    INCREASE        reduce using rule 64 (name_method -> JOIN .)
    DECREASE        reduce using rule 64 (name_method -> JOIN .)
    PLUS            reduce using rule 64 (name_method -> JOIN .)
    TIMES           reduce using rule 64 (name_method -> JOIN .)
    DIVIDE          reduce using rule 64 (name_method -> JOIN .)
    MODULUS         reduce using rule 64 (name_method -> JOIN .)
    LESS            reduce using rule 64 (name_method -> JOIN .)
    GREATER         reduce using rule 64 (name_method -> JOIN .)
    EQUAL_TO        reduce using rule 64 (name_method -> JOIN .)
    NOT_EQUAL_TO    reduce using rule 64 (name_method -> JOIN .)
    LESS_EQUAL      reduce using rule 64 (name_method -> JOIN .)
    GREATER_EQUAL   reduce using rule 64 (name_method -> JOIN .)
    AND             reduce using rule 64 (name_method -> JOIN .)
    OR              reduce using rule 64 (name_method -> JOIN .)
    RIGHT_SQ_BRACKET reduce using rule 64 (name_method -> JOIN .)
    RIGHT_PARENTHESIS reduce using rule 64 (name_method -> JOIN .)
    COMMA           reduce using rule 64 (name_method -> JOIN .)
    COLON           reduce using rule 64 (name_method -> JOIN .)


state 85

    (65) name_method -> LENGTH .

    LEFT_PARENTHESIS reduce using rule 65 (name_method -> LENGTH .)
    MINUS           reduce using rule 65 (name_method -> LENGTH .)
    NOT             reduce using rule 65 (name_method -> LENGTH .)
    PARSEINT        reduce using rule 65 (name_method -> LENGTH .)
    PARSEFLOAT      reduce using rule 65 (name_method -> LENGTH .)
    TYPEOF          reduce using rule 65 (name_method -> LENGTH .)
    ID              reduce using rule 65 (name_method -> LENGTH .)
    INTEGER         reduce using rule 65 (name_method -> LENGTH .)
    DECIMAL         reduce using rule 65 (name_method -> LENGTH .)
    TEXT            reduce using rule 65 (name_method -> LENGTH .)
    CHARACTER       reduce using rule 65 (name_method -> LENGTH .)
    BOOL            reduce using rule 65 (name_method -> LENGTH .)
    NULL            reduce using rule 65 (name_method -> LENGTH .)
    SEMICOLON       reduce using rule 65 (name_method -> LENGTH .)
    PERIOD          reduce using rule 65 (name_method -> LENGTH .)
    INCREASE        reduce using rule 65 (name_method -> LENGTH .)
    DECREASE        reduce using rule 65 (name_method -> LENGTH .)
    PLUS            reduce using rule 65 (name_method -> LENGTH .)
    TIMES           reduce using rule 65 (name_method -> LENGTH .)
    DIVIDE          reduce using rule 65 (name_method -> LENGTH .)
    MODULUS         reduce using rule 65 (name_method -> LENGTH .)
    LESS            reduce using rule 65 (name_method -> LENGTH .)
    GREATER         reduce using rule 65 (name_method -> LENGTH .)
    EQUAL_TO        reduce using rule 65 (name_method -> LENGTH .)
    NOT_EQUAL_TO    reduce using rule 65 (name_method -> LENGTH .)
    LESS_EQUAL      reduce using rule 65 (name_method -> LENGTH .)
    GREATER_EQUAL   reduce using rule 65 (name_method -> LENGTH .)
    AND             reduce using rule 65 (name_method -> LENGTH .)
    OR              reduce using rule 65 (name_method -> LENGTH .)
    RIGHT_SQ_BRACKET reduce using rule 65 (name_method -> LENGTH .)
    RIGHT_PARENTHESIS reduce using rule 65 (name_method -> LENGTH .)
    COMMA           reduce using rule 65 (name_method -> LENGTH .)
    COLON           reduce using rule 65 (name_method -> LENGTH .)


state 86

    (18) declaration -> symbol_type ID COLON . data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID COLON . data_type SEMICOLON
    (70) declaration_array -> symbol_type ID COLON . data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (103) data_type -> . NUMBER
    (104) data_type -> . FLOAT
    (105) data_type -> . STRING
    (106) data_type -> . CHAR
    (107) data_type -> . BOOLEAN

    NUMBER          shift and go to state 125
    FLOAT           shift and go to state 126
    STRING          shift and go to state 127
    CHAR            shift and go to state 128
    BOOLEAN         shift and go to state 129

    data_type                      shift and go to state 124

state 87

    (20) declaration -> symbol_type ID EQUAL . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 130
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 88

    (21) assignment -> ID EQUAL expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 131
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 89

    (22) assignment -> ID ADITION expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 132
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 90

    (23) assignment -> ID SUBTRACTION expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 133
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 91

    (71) assignment -> ID LEFT_SQ_BRACKET expression . RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (72) access_array -> ID LEFT_SQ_BRACKET expression . RIGHT_SQ_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_SQ_BRACKET shift and go to state 134
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 92

    (51) call_function -> ID LEFT_PARENTHESIS expression_list . RIGHT_PARENTHESIS
    (73) expression_list -> expression_list . COMMA expression

    RIGHT_PARENTHESIS shift and go to state 135
    COMMA           shift and go to state 136


state 93

    (52) call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INCREASE        reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DECREASE        reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS            reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUAL_TO        reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUAL_TO    reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PERIOD          reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SQ_BRACKET reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 52 (call_function -> ID LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 94

    (74) expression_list -> expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS reduce using rule 74 (expression_list -> expression .)
    COMMA           reduce using rule 74 (expression_list -> expression .)
    RIGHT_SQ_BRACKET reduce using rule 74 (expression_list -> expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 95

    (24) if -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 137
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 96

    (31) switch -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 138
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 97

    (36) while -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 139
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 98

    (37) for -> FOR LEFT_PARENTHESIS declaration . expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 140
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 99

    (38) for -> FOR LEFT_PARENTHESIS symbol_type . ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (18) declaration -> symbol_type . ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type . ID COLON data_type SEMICOLON
    (20) declaration -> symbol_type . ID EQUAL expression SEMICOLON

    ID              shift and go to state 141


state 100

    (41) function -> FUNCTION ID LEFT_PARENTHESIS . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> FUNCTION ID LEFT_PARENTHESIS . RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> FUNCTION ID LEFT_PARENTHESIS . params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> FUNCTION ID LEFT_PARENTHESIS . params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (45) params -> . params COMMA param
    (46) params -> . param
    (47) param -> . ID COLON data_type
    (48) param -> . ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET

    RIGHT_PARENTHESIS shift and go to state 143
    ID              shift and go to state 142

    params                         shift and go to state 144
    param                          shift and go to state 145

state 101

    (82) expression_unary -> expression INCREASE .

    INCREASE        reduce using rule 82 (expression_unary -> expression INCREASE .)
    DECREASE        reduce using rule 82 (expression_unary -> expression INCREASE .)
    PLUS            reduce using rule 82 (expression_unary -> expression INCREASE .)
    MINUS           reduce using rule 82 (expression_unary -> expression INCREASE .)
    TIMES           reduce using rule 82 (expression_unary -> expression INCREASE .)
    DIVIDE          reduce using rule 82 (expression_unary -> expression INCREASE .)
    MODULUS         reduce using rule 82 (expression_unary -> expression INCREASE .)
    LESS            reduce using rule 82 (expression_unary -> expression INCREASE .)
    GREATER         reduce using rule 82 (expression_unary -> expression INCREASE .)
    EQUAL_TO        reduce using rule 82 (expression_unary -> expression INCREASE .)
    NOT_EQUAL_TO    reduce using rule 82 (expression_unary -> expression INCREASE .)
    LESS_EQUAL      reduce using rule 82 (expression_unary -> expression INCREASE .)
    GREATER_EQUAL   reduce using rule 82 (expression_unary -> expression INCREASE .)
    AND             reduce using rule 82 (expression_unary -> expression INCREASE .)
    OR              reduce using rule 82 (expression_unary -> expression INCREASE .)
    SEMICOLON       reduce using rule 82 (expression_unary -> expression INCREASE .)
    PERIOD          reduce using rule 82 (expression_unary -> expression INCREASE .)
    RIGHT_SQ_BRACKET reduce using rule 82 (expression_unary -> expression INCREASE .)
    RIGHT_PARENTHESIS reduce using rule 82 (expression_unary -> expression INCREASE .)
    COMMA           reduce using rule 82 (expression_unary -> expression INCREASE .)
    COLON           reduce using rule 82 (expression_unary -> expression INCREASE .)


state 102

    (83) expression_unary -> expression DECREASE .

    INCREASE        reduce using rule 83 (expression_unary -> expression DECREASE .)
    DECREASE        reduce using rule 83 (expression_unary -> expression DECREASE .)
    PLUS            reduce using rule 83 (expression_unary -> expression DECREASE .)
    MINUS           reduce using rule 83 (expression_unary -> expression DECREASE .)
    TIMES           reduce using rule 83 (expression_unary -> expression DECREASE .)
    DIVIDE          reduce using rule 83 (expression_unary -> expression DECREASE .)
    MODULUS         reduce using rule 83 (expression_unary -> expression DECREASE .)
    LESS            reduce using rule 83 (expression_unary -> expression DECREASE .)
    GREATER         reduce using rule 83 (expression_unary -> expression DECREASE .)
    EQUAL_TO        reduce using rule 83 (expression_unary -> expression DECREASE .)
    NOT_EQUAL_TO    reduce using rule 83 (expression_unary -> expression DECREASE .)
    LESS_EQUAL      reduce using rule 83 (expression_unary -> expression DECREASE .)
    GREATER_EQUAL   reduce using rule 83 (expression_unary -> expression DECREASE .)
    AND             reduce using rule 83 (expression_unary -> expression DECREASE .)
    OR              reduce using rule 83 (expression_unary -> expression DECREASE .)
    SEMICOLON       reduce using rule 83 (expression_unary -> expression DECREASE .)
    PERIOD          reduce using rule 83 (expression_unary -> expression DECREASE .)
    RIGHT_SQ_BRACKET reduce using rule 83 (expression_unary -> expression DECREASE .)
    RIGHT_PARENTHESIS reduce using rule 83 (expression_unary -> expression DECREASE .)
    COMMA           reduce using rule 83 (expression_unary -> expression DECREASE .)
    COLON           reduce using rule 83 (expression_unary -> expression DECREASE .)


state 103

    (87) arithmetic -> expression PLUS . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 146
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 104

    (88) arithmetic -> expression MINUS . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 147
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 105

    (89) arithmetic -> expression TIMES . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 148
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 106

    (90) arithmetic -> expression DIVIDE . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 149
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 107

    (91) arithmetic -> expression MODULUS . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 150
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 108

    (92) relational -> expression LESS . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 151
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 109

    (93) relational -> expression GREATER . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 152
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 110

    (94) relational -> expression EQUAL_TO . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 153
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 111

    (95) relational -> expression NOT_EQUAL_TO . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 154
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 112

    (96) relational -> expression LESS_EQUAL . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 155
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 113

    (97) relational -> expression GREATER_EQUAL . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 156
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 114

    (98) logical -> expression AND . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 157
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 115

    (99) logical -> expression OR . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 158
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 116

    (80) expression_unary -> MINUS expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 80 (expression_unary -> MINUS expression .)
    DECREASE        reduce using rule 80 (expression_unary -> MINUS expression .)
    PLUS            reduce using rule 80 (expression_unary -> MINUS expression .)
    MINUS           reduce using rule 80 (expression_unary -> MINUS expression .)
    TIMES           reduce using rule 80 (expression_unary -> MINUS expression .)
    DIVIDE          reduce using rule 80 (expression_unary -> MINUS expression .)
    MODULUS         reduce using rule 80 (expression_unary -> MINUS expression .)
    LESS            reduce using rule 80 (expression_unary -> MINUS expression .)
    GREATER         reduce using rule 80 (expression_unary -> MINUS expression .)
    EQUAL_TO        reduce using rule 80 (expression_unary -> MINUS expression .)
    NOT_EQUAL_TO    reduce using rule 80 (expression_unary -> MINUS expression .)
    LESS_EQUAL      reduce using rule 80 (expression_unary -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 80 (expression_unary -> MINUS expression .)
    AND             reduce using rule 80 (expression_unary -> MINUS expression .)
    OR              reduce using rule 80 (expression_unary -> MINUS expression .)
    SEMICOLON       reduce using rule 80 (expression_unary -> MINUS expression .)
    PERIOD          reduce using rule 80 (expression_unary -> MINUS expression .)
    RIGHT_SQ_BRACKET reduce using rule 80 (expression_unary -> MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 80 (expression_unary -> MINUS expression .)
    COMMA           reduce using rule 80 (expression_unary -> MINUS expression .)
    COLON           reduce using rule 80 (expression_unary -> MINUS expression .)

  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MODULUS         [ shift and go to state 107 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 117

    (81) expression_unary -> NOT expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 81 (expression_unary -> NOT expression .)
    DECREASE        reduce using rule 81 (expression_unary -> NOT expression .)
    PLUS            reduce using rule 81 (expression_unary -> NOT expression .)
    MINUS           reduce using rule 81 (expression_unary -> NOT expression .)
    TIMES           reduce using rule 81 (expression_unary -> NOT expression .)
    DIVIDE          reduce using rule 81 (expression_unary -> NOT expression .)
    MODULUS         reduce using rule 81 (expression_unary -> NOT expression .)
    LESS            reduce using rule 81 (expression_unary -> NOT expression .)
    GREATER         reduce using rule 81 (expression_unary -> NOT expression .)
    EQUAL_TO        reduce using rule 81 (expression_unary -> NOT expression .)
    NOT_EQUAL_TO    reduce using rule 81 (expression_unary -> NOT expression .)
    LESS_EQUAL      reduce using rule 81 (expression_unary -> NOT expression .)
    GREATER_EQUAL   reduce using rule 81 (expression_unary -> NOT expression .)
    AND             reduce using rule 81 (expression_unary -> NOT expression .)
    OR              reduce using rule 81 (expression_unary -> NOT expression .)
    SEMICOLON       reduce using rule 81 (expression_unary -> NOT expression .)
    PERIOD          reduce using rule 81 (expression_unary -> NOT expression .)
    RIGHT_SQ_BRACKET reduce using rule 81 (expression_unary -> NOT expression .)
    RIGHT_PARENTHESIS reduce using rule 81 (expression_unary -> NOT expression .)
    COMMA           reduce using rule 81 (expression_unary -> NOT expression .)
    COLON           reduce using rule 81 (expression_unary -> NOT expression .)

  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MODULUS         [ shift and go to state 107 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 118

    (100) expression_group -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 159
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 119

    (72) access_array -> ID LEFT_SQ_BRACKET . expression RIGHT_SQ_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 160
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 120

    (49) return -> RETURN expression SEMICOLON .

    ID              reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    PARSEINT        reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    TYPEOF          reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    INTEGER         reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    DECIMAL         reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    TEXT            reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    $end            reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 49 (return -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 49 (return -> RETURN expression SEMICOLON .)


state 121

    (66) print -> CONSOLE PERIOD LOG . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 161


state 122

    (53) methods -> methods PERIOD name_method LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (100) expression_group -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_PARENTHESIS shift and go to state 162
    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    methods                        shift and go to state 61
    expression                     shift and go to state 118
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 123

    (54) methods -> methods PERIOD name_method expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    PERIOD          reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    RIGHT_SQ_BRACKET reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    RIGHT_PARENTHESIS reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    COMMA           reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    COLON           reduce using rule 54 (methods -> methods PERIOD name_method expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115

  ! INCREASE        [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! DECREASE        [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! PLUS            [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! MINUS           [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! TIMES           [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! DIVIDE          [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! MODULUS         [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! LESS            [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! GREATER         [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! EQUAL_TO        [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! AND             [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]
  ! OR              [ reduce using rule 54 (methods -> methods PERIOD name_method expression .) ]


state 124

    (18) declaration -> symbol_type ID COLON data_type . EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID COLON data_type . SEMICOLON
    (70) declaration_array -> symbol_type ID COLON data_type . LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    EQUAL           shift and go to state 163
    SEMICOLON       shift and go to state 164
    LEFT_SQ_BRACKET shift and go to state 165


state 125

    (103) data_type -> NUMBER .

    EQUAL           reduce using rule 103 (data_type -> NUMBER .)
    SEMICOLON       reduce using rule 103 (data_type -> NUMBER .)
    LEFT_SQ_BRACKET reduce using rule 103 (data_type -> NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 103 (data_type -> NUMBER .)
    COMMA           reduce using rule 103 (data_type -> NUMBER .)
    LEFT_CURLY_BRACKET reduce using rule 103 (data_type -> NUMBER .)


state 126

    (104) data_type -> FLOAT .

    EQUAL           reduce using rule 104 (data_type -> FLOAT .)
    SEMICOLON       reduce using rule 104 (data_type -> FLOAT .)
    LEFT_SQ_BRACKET reduce using rule 104 (data_type -> FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 104 (data_type -> FLOAT .)
    COMMA           reduce using rule 104 (data_type -> FLOAT .)
    LEFT_CURLY_BRACKET reduce using rule 104 (data_type -> FLOAT .)


state 127

    (105) data_type -> STRING .

    EQUAL           reduce using rule 105 (data_type -> STRING .)
    SEMICOLON       reduce using rule 105 (data_type -> STRING .)
    LEFT_SQ_BRACKET reduce using rule 105 (data_type -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 105 (data_type -> STRING .)
    COMMA           reduce using rule 105 (data_type -> STRING .)
    LEFT_CURLY_BRACKET reduce using rule 105 (data_type -> STRING .)


state 128

    (106) data_type -> CHAR .

    EQUAL           reduce using rule 106 (data_type -> CHAR .)
    SEMICOLON       reduce using rule 106 (data_type -> CHAR .)
    LEFT_SQ_BRACKET reduce using rule 106 (data_type -> CHAR .)
    RIGHT_PARENTHESIS reduce using rule 106 (data_type -> CHAR .)
    COMMA           reduce using rule 106 (data_type -> CHAR .)
    LEFT_CURLY_BRACKET reduce using rule 106 (data_type -> CHAR .)


state 129

    (107) data_type -> BOOLEAN .

    EQUAL           reduce using rule 107 (data_type -> BOOLEAN .)
    SEMICOLON       reduce using rule 107 (data_type -> BOOLEAN .)
    LEFT_SQ_BRACKET reduce using rule 107 (data_type -> BOOLEAN .)
    RIGHT_PARENTHESIS reduce using rule 107 (data_type -> BOOLEAN .)
    COMMA           reduce using rule 107 (data_type -> BOOLEAN .)
    LEFT_CURLY_BRACKET reduce using rule 107 (data_type -> BOOLEAN .)


state 130

    (20) declaration -> symbol_type ID EQUAL expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 166
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 131

    (21) assignment -> ID EQUAL expression SEMICOLON .

    ID              reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    FOR             reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    PARSEINT        reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    TYPEOF          reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    DECIMAL         reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    TEXT            reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    CHARACTER       reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    NULL            reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    CASE            reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 21 (assignment -> ID EQUAL expression SEMICOLON .)


state 132

    (22) assignment -> ID ADITION expression SEMICOLON .

    ID              reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    IF              reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    SWITCH          reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    WHILE           reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    FOR             reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    FUNCTION        reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    PARSEINT        reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    TYPEOF          reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    BREAK           reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    CONTINUE        reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    RETURN          reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    CONSOLE         reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    VAR             reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    CONST           reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    INTEGER         reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    DECIMAL         reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    TEXT            reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    CHARACTER       reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    BOOL            reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    NULL            reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    $end            reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    CASE            reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)
    DEFAULT         reduce using rule 22 (assignment -> ID ADITION expression SEMICOLON .)


state 133

    (23) assignment -> ID SUBTRACTION expression SEMICOLON .

    ID              reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    IF              reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    SWITCH          reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    WHILE           reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    FOR             reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    FUNCTION        reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    PARSEINT        reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    TYPEOF          reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    BREAK           reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    CONTINUE        reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    RETURN          reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    CONSOLE         reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    VAR             reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    CONST           reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    INTEGER         reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    DECIMAL         reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    TEXT            reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    CHARACTER       reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    BOOL            reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    NULL            reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    $end            reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    CASE            reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)
    DEFAULT         reduce using rule 23 (assignment -> ID SUBTRACTION expression SEMICOLON .)


state 134

    (71) assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET . EQUAL expression SEMICOLON
    (72) access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .

    EQUAL           shift and go to state 167
    SEMICOLON       reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    PERIOD          reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)


state 135

    (51) call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    INCREASE        reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    DECREASE        reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    EQUAL_TO        reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    NOT_EQUAL_TO    reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    PERIOD          reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_SQ_BRACKET reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 51 (call_function -> ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)


state 136

    (73) expression_list -> expression_list COMMA . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 168
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 137

    (24) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 169


state 138

    (31) switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 170


state 139

    (36) while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 171


state 140

    (37) for -> FOR LEFT_PARENTHESIS declaration expression . SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 172
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 141

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID . OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (18) declaration -> symbol_type ID . COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID . COLON data_type SEMICOLON
    (20) declaration -> symbol_type ID . EQUAL expression SEMICOLON

    OF              shift and go to state 173
    COLON           shift and go to state 174
    EQUAL           shift and go to state 87


state 142

    (47) param -> ID . COLON data_type
    (48) param -> ID . COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET

    COLON           shift and go to state 175


state 143

    (41) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS . COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 176
    COLON           shift and go to state 177


state 144

    (43) function -> FUNCTION ID LEFT_PARENTHESIS params . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> FUNCTION ID LEFT_PARENTHESIS params . RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (45) params -> params . COMMA param

    RIGHT_PARENTHESIS shift and go to state 178
    COMMA           shift and go to state 179


state 145

    (46) params -> param .

    RIGHT_PARENTHESIS reduce using rule 46 (params -> param .)
    COMMA           reduce using rule 46 (params -> param .)


state 146

    (87) arithmetic -> expression PLUS expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 87 (arithmetic -> expression PLUS expression .)
    DECREASE        reduce using rule 87 (arithmetic -> expression PLUS expression .)
    PLUS            reduce using rule 87 (arithmetic -> expression PLUS expression .)
    MINUS           reduce using rule 87 (arithmetic -> expression PLUS expression .)
    LESS            reduce using rule 87 (arithmetic -> expression PLUS expression .)
    GREATER         reduce using rule 87 (arithmetic -> expression PLUS expression .)
    EQUAL_TO        reduce using rule 87 (arithmetic -> expression PLUS expression .)
    NOT_EQUAL_TO    reduce using rule 87 (arithmetic -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 87 (arithmetic -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 87 (arithmetic -> expression PLUS expression .)
    AND             reduce using rule 87 (arithmetic -> expression PLUS expression .)
    OR              reduce using rule 87 (arithmetic -> expression PLUS expression .)
    SEMICOLON       reduce using rule 87 (arithmetic -> expression PLUS expression .)
    PERIOD          reduce using rule 87 (arithmetic -> expression PLUS expression .)
    RIGHT_SQ_BRACKET reduce using rule 87 (arithmetic -> expression PLUS expression .)
    RIGHT_PARENTHESIS reduce using rule 87 (arithmetic -> expression PLUS expression .)
    COMMA           reduce using rule 87 (arithmetic -> expression PLUS expression .)
    COLON           reduce using rule 87 (arithmetic -> expression PLUS expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! TIMES           [ reduce using rule 87 (arithmetic -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 87 (arithmetic -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 87 (arithmetic -> expression PLUS expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 147

    (88) arithmetic -> expression MINUS expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 88 (arithmetic -> expression MINUS expression .)
    DECREASE        reduce using rule 88 (arithmetic -> expression MINUS expression .)
    PLUS            reduce using rule 88 (arithmetic -> expression MINUS expression .)
    MINUS           reduce using rule 88 (arithmetic -> expression MINUS expression .)
    LESS            reduce using rule 88 (arithmetic -> expression MINUS expression .)
    GREATER         reduce using rule 88 (arithmetic -> expression MINUS expression .)
    EQUAL_TO        reduce using rule 88 (arithmetic -> expression MINUS expression .)
    NOT_EQUAL_TO    reduce using rule 88 (arithmetic -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 88 (arithmetic -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 88 (arithmetic -> expression MINUS expression .)
    AND             reduce using rule 88 (arithmetic -> expression MINUS expression .)
    OR              reduce using rule 88 (arithmetic -> expression MINUS expression .)
    SEMICOLON       reduce using rule 88 (arithmetic -> expression MINUS expression .)
    PERIOD          reduce using rule 88 (arithmetic -> expression MINUS expression .)
    RIGHT_SQ_BRACKET reduce using rule 88 (arithmetic -> expression MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 88 (arithmetic -> expression MINUS expression .)
    COMMA           reduce using rule 88 (arithmetic -> expression MINUS expression .)
    COLON           reduce using rule 88 (arithmetic -> expression MINUS expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! TIMES           [ reduce using rule 88 (arithmetic -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 88 (arithmetic -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 88 (arithmetic -> expression MINUS expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 148

    (89) arithmetic -> expression TIMES expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 89 (arithmetic -> expression TIMES expression .)
    DECREASE        reduce using rule 89 (arithmetic -> expression TIMES expression .)
    PLUS            reduce using rule 89 (arithmetic -> expression TIMES expression .)
    MINUS           reduce using rule 89 (arithmetic -> expression TIMES expression .)
    TIMES           reduce using rule 89 (arithmetic -> expression TIMES expression .)
    DIVIDE          reduce using rule 89 (arithmetic -> expression TIMES expression .)
    MODULUS         reduce using rule 89 (arithmetic -> expression TIMES expression .)
    LESS            reduce using rule 89 (arithmetic -> expression TIMES expression .)
    GREATER         reduce using rule 89 (arithmetic -> expression TIMES expression .)
    EQUAL_TO        reduce using rule 89 (arithmetic -> expression TIMES expression .)
    NOT_EQUAL_TO    reduce using rule 89 (arithmetic -> expression TIMES expression .)
    LESS_EQUAL      reduce using rule 89 (arithmetic -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 89 (arithmetic -> expression TIMES expression .)
    AND             reduce using rule 89 (arithmetic -> expression TIMES expression .)
    OR              reduce using rule 89 (arithmetic -> expression TIMES expression .)
    SEMICOLON       reduce using rule 89 (arithmetic -> expression TIMES expression .)
    PERIOD          reduce using rule 89 (arithmetic -> expression TIMES expression .)
    RIGHT_SQ_BRACKET reduce using rule 89 (arithmetic -> expression TIMES expression .)
    RIGHT_PARENTHESIS reduce using rule 89 (arithmetic -> expression TIMES expression .)
    COMMA           reduce using rule 89 (arithmetic -> expression TIMES expression .)
    COLON           reduce using rule 89 (arithmetic -> expression TIMES expression .)

  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MODULUS         [ shift and go to state 107 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 149

    (90) arithmetic -> expression DIVIDE expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    DECREASE        reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    PLUS            reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    MINUS           reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    TIMES           reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    MODULUS         reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    LESS            reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    GREATER         reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    EQUAL_TO        reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    NOT_EQUAL_TO    reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    AND             reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    OR              reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    PERIOD          reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    RIGHT_SQ_BRACKET reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    RIGHT_PARENTHESIS reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    COMMA           reduce using rule 90 (arithmetic -> expression DIVIDE expression .)
    COLON           reduce using rule 90 (arithmetic -> expression DIVIDE expression .)

  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MODULUS         [ shift and go to state 107 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 150

    (91) arithmetic -> expression MODULUS expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    DECREASE        reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    PLUS            reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    MINUS           reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    TIMES           reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    DIVIDE          reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    MODULUS         reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    LESS            reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    GREATER         reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    EQUAL_TO        reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    NOT_EQUAL_TO    reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    LESS_EQUAL      reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    GREATER_EQUAL   reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    AND             reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    OR              reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    PERIOD          reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    RIGHT_SQ_BRACKET reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    RIGHT_PARENTHESIS reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    COMMA           reduce using rule 91 (arithmetic -> expression MODULUS expression .)
    COLON           reduce using rule 91 (arithmetic -> expression MODULUS expression .)

  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 104 ]
  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MODULUS         [ shift and go to state 107 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 151

    (92) relational -> expression LESS expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 92 (relational -> expression LESS expression .)
    DECREASE        reduce using rule 92 (relational -> expression LESS expression .)
    LESS            reduce using rule 92 (relational -> expression LESS expression .)
    GREATER         reduce using rule 92 (relational -> expression LESS expression .)
    EQUAL_TO        reduce using rule 92 (relational -> expression LESS expression .)
    NOT_EQUAL_TO    reduce using rule 92 (relational -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 92 (relational -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 92 (relational -> expression LESS expression .)
    AND             reduce using rule 92 (relational -> expression LESS expression .)
    OR              reduce using rule 92 (relational -> expression LESS expression .)
    SEMICOLON       reduce using rule 92 (relational -> expression LESS expression .)
    PERIOD          reduce using rule 92 (relational -> expression LESS expression .)
    RIGHT_SQ_BRACKET reduce using rule 92 (relational -> expression LESS expression .)
    RIGHT_PARENTHESIS reduce using rule 92 (relational -> expression LESS expression .)
    COMMA           reduce using rule 92 (relational -> expression LESS expression .)
    COLON           reduce using rule 92 (relational -> expression LESS expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! PLUS            [ reduce using rule 92 (relational -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 92 (relational -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 92 (relational -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 92 (relational -> expression LESS expression .) ]
  ! MODULUS         [ reduce using rule 92 (relational -> expression LESS expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 152

    (93) relational -> expression GREATER expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 93 (relational -> expression GREATER expression .)
    DECREASE        reduce using rule 93 (relational -> expression GREATER expression .)
    LESS            reduce using rule 93 (relational -> expression GREATER expression .)
    GREATER         reduce using rule 93 (relational -> expression GREATER expression .)
    EQUAL_TO        reduce using rule 93 (relational -> expression GREATER expression .)
    NOT_EQUAL_TO    reduce using rule 93 (relational -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 93 (relational -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 93 (relational -> expression GREATER expression .)
    AND             reduce using rule 93 (relational -> expression GREATER expression .)
    OR              reduce using rule 93 (relational -> expression GREATER expression .)
    SEMICOLON       reduce using rule 93 (relational -> expression GREATER expression .)
    PERIOD          reduce using rule 93 (relational -> expression GREATER expression .)
    RIGHT_SQ_BRACKET reduce using rule 93 (relational -> expression GREATER expression .)
    RIGHT_PARENTHESIS reduce using rule 93 (relational -> expression GREATER expression .)
    COMMA           reduce using rule 93 (relational -> expression GREATER expression .)
    COLON           reduce using rule 93 (relational -> expression GREATER expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! PLUS            [ reduce using rule 93 (relational -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 93 (relational -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 93 (relational -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 93 (relational -> expression GREATER expression .) ]
  ! MODULUS         [ reduce using rule 93 (relational -> expression GREATER expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 153

    (94) relational -> expression EQUAL_TO expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    DECREASE        reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    EQUAL_TO        reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    NOT_EQUAL_TO    reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    AND             reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    OR              reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    SEMICOLON       reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    PERIOD          reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    RIGHT_SQ_BRACKET reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    RIGHT_PARENTHESIS reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    COMMA           reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    COLON           reduce using rule 94 (relational -> expression EQUAL_TO expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113

  ! PLUS            [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! MINUS           [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! TIMES           [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! DIVIDE          [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! MODULUS         [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! LESS            [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! GREATER         [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! LESS_EQUAL      [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 94 (relational -> expression EQUAL_TO expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 154

    (95) relational -> expression NOT_EQUAL_TO expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    DECREASE        reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    EQUAL_TO        reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    NOT_EQUAL_TO    reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    AND             reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    OR              reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    SEMICOLON       reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    PERIOD          reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    RIGHT_SQ_BRACKET reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    RIGHT_PARENTHESIS reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    COMMA           reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    COLON           reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113

  ! PLUS            [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! MINUS           [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! TIMES           [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! DIVIDE          [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! MODULUS         [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! LESS            [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! GREATER         [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! LESS_EQUAL      [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 95 (relational -> expression NOT_EQUAL_TO expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 155

    (96) relational -> expression LESS_EQUAL expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    DECREASE        reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    GREATER         reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    EQUAL_TO        reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    NOT_EQUAL_TO    reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    AND             reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    OR              reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    SEMICOLON       reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    PERIOD          reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    RIGHT_SQ_BRACKET reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    COLON           reduce using rule 96 (relational -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! PLUS            [ reduce using rule 96 (relational -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 96 (relational -> expression LESS_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 96 (relational -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 96 (relational -> expression LESS_EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 96 (relational -> expression LESS_EQUAL expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 156

    (97) relational -> expression GREATER_EQUAL expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    DECREASE        reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    GREATER         reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    EQUAL_TO        reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    NOT_EQUAL_TO    reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    SEMICOLON       reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    PERIOD          reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    RIGHT_SQ_BRACKET reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    COLON           reduce using rule 97 (relational -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107

  ! PLUS            [ reduce using rule 97 (relational -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 97 (relational -> expression GREATER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 97 (relational -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 97 (relational -> expression GREATER_EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 97 (relational -> expression GREATER_EQUAL expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! LESS            [ shift and go to state 108 ]
  ! GREATER         [ shift and go to state 109 ]
  ! EQUAL_TO        [ shift and go to state 110 ]
  ! NOT_EQUAL_TO    [ shift and go to state 111 ]
  ! LESS_EQUAL      [ shift and go to state 112 ]
  ! GREATER_EQUAL   [ shift and go to state 113 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 157

    (98) logical -> expression AND expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 98 (logical -> expression AND expression .)
    DECREASE        reduce using rule 98 (logical -> expression AND expression .)
    AND             reduce using rule 98 (logical -> expression AND expression .)
    OR              reduce using rule 98 (logical -> expression AND expression .)
    SEMICOLON       reduce using rule 98 (logical -> expression AND expression .)
    PERIOD          reduce using rule 98 (logical -> expression AND expression .)
    RIGHT_SQ_BRACKET reduce using rule 98 (logical -> expression AND expression .)
    RIGHT_PARENTHESIS reduce using rule 98 (logical -> expression AND expression .)
    COMMA           reduce using rule 98 (logical -> expression AND expression .)
    COLON           reduce using rule 98 (logical -> expression AND expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113

  ! PLUS            [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! LESS            [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! EQUAL_TO        [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 98 (logical -> expression AND expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 115 ]


state 158

    (99) logical -> expression OR expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    INCREASE        reduce using rule 99 (logical -> expression OR expression .)
    DECREASE        reduce using rule 99 (logical -> expression OR expression .)
    OR              reduce using rule 99 (logical -> expression OR expression .)
    SEMICOLON       reduce using rule 99 (logical -> expression OR expression .)
    PERIOD          reduce using rule 99 (logical -> expression OR expression .)
    RIGHT_SQ_BRACKET reduce using rule 99 (logical -> expression OR expression .)
    RIGHT_PARENTHESIS reduce using rule 99 (logical -> expression OR expression .)
    COMMA           reduce using rule 99 (logical -> expression OR expression .)
    COLON           reduce using rule 99 (logical -> expression OR expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114

  ! PLUS            [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! LESS            [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! EQUAL_TO        [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! AND             [ reduce using rule 99 (logical -> expression OR expression .) ]
  ! INCREASE        [ shift and go to state 101 ]
  ! DECREASE        [ shift and go to state 102 ]
  ! OR              [ shift and go to state 115 ]


state 159

    (100) expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    INCREASE        reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DECREASE        reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL_TO        reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUAL_TO    reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PERIOD          reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SQ_BRACKET reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 100 (expression_group -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 160

    (72) access_array -> ID LEFT_SQ_BRACKET expression . RIGHT_SQ_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_SQ_BRACKET shift and go to state 180
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 161

    (66) print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS . expression_list RIGHT_PARENTHESIS SEMICOLON
    (73) expression_list -> . expression_list COMMA expression
    (74) expression_list -> . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression_list                shift and go to state 181
    expression                     shift and go to state 94
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 162

    (53) methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PERIOD          reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INCREASE        reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DECREASE        reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS            reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUAL_TO        reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUAL_TO    reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SQ_BRACKET reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 53 (methods -> methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 163

    (18) declaration -> symbol_type ID COLON data_type EQUAL . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 182
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 164

    (19) declaration -> symbol_type ID COLON data_type SEMICOLON .

    ID              reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    IF              reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    SWITCH          reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    WHILE           reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    FOR             reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    FUNCTION        reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    PARSEINT        reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    PARSEFLOAT      reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    TYPEOF          reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    BREAK           reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    CONTINUE        reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    RETURN          reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    CONSOLE         reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    VAR             reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    CONST           reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    INTEGER         reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    DECIMAL         reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    TEXT            reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    CHARACTER       reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    BOOL            reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    NULL            reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    $end            reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    MINUS           reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    NOT             reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    CASE            reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)
    DEFAULT         reduce using rule 19 (declaration -> symbol_type ID COLON data_type SEMICOLON .)


state 165

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET . RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    RIGHT_SQ_BRACKET shift and go to state 183


state 166

    (20) declaration -> symbol_type ID EQUAL expression SEMICOLON .

    ID              reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    FOR             reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    PARSEINT        reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    TYPEOF          reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    DECIMAL         reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    TEXT            reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    CHARACTER       reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    NULL            reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    MINUS           reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    NOT             reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    CASE            reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 20 (declaration -> symbol_type ID EQUAL expression SEMICOLON .)


state 167

    (71) assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL . expression SEMICOLON
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 184
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 168

    (73) expression_list -> expression_list COMMA expression .
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    RIGHT_SQ_BRACKET reduce using rule 73 (expression_list -> expression_list COMMA expression .)
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 169

    (24) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 185
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 170

    (31) switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
    (32) cases -> . cases case
    (33) cases -> . case
    (34) case -> . CASE expression COLON block
    (35) case -> . DEFAULT COLON block

    CASE            shift and go to state 188
    DEFAULT         shift and go to state 189

    cases                          shift and go to state 186
    case                           shift and go to state 187

state 171

    (36) while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 190
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 172

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 191
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 173

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF . ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    ID              shift and go to state 192


state 174

    (18) declaration -> symbol_type ID COLON . data_type EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID COLON . data_type SEMICOLON
    (103) data_type -> . NUMBER
    (104) data_type -> . FLOAT
    (105) data_type -> . STRING
    (106) data_type -> . CHAR
    (107) data_type -> . BOOLEAN

    NUMBER          shift and go to state 125
    FLOAT           shift and go to state 126
    STRING          shift and go to state 127
    CHAR            shift and go to state 128
    BOOLEAN         shift and go to state 129

    data_type                      shift and go to state 193

state 175

    (47) param -> ID COLON . data_type
    (48) param -> ID COLON . data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET
    (103) data_type -> . NUMBER
    (104) data_type -> . FLOAT
    (105) data_type -> . STRING
    (106) data_type -> . CHAR
    (107) data_type -> . BOOLEAN

    NUMBER          shift and go to state 125
    FLOAT           shift and go to state 126
    STRING          shift and go to state 127
    CHAR            shift and go to state 128
    BOOLEAN         shift and go to state 129

    data_type                      shift and go to state 194

state 176

    (41) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 195
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 177

    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON . data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (103) data_type -> . NUMBER
    (104) data_type -> . FLOAT
    (105) data_type -> . STRING
    (106) data_type -> . CHAR
    (107) data_type -> . BOOLEAN

    NUMBER          shift and go to state 125
    FLOAT           shift and go to state 126
    STRING          shift and go to state 127
    CHAR            shift and go to state 128
    BOOLEAN         shift and go to state 129

    data_type                      shift and go to state 196

state 178

    (43) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS . COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 197
    COLON           shift and go to state 198


state 179

    (45) params -> params COMMA . param
    (47) param -> . ID COLON data_type
    (48) param -> . ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET

    ID              shift and go to state 142

    param                          shift and go to state 199

state 180

    (72) access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .

    INCREASE        reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    DECREASE        reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    PLUS            reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    MINUS           reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    TIMES           reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    DIVIDE          reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    MODULUS         reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    LESS            reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    GREATER         reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    EQUAL_TO        reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    NOT_EQUAL_TO    reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    LESS_EQUAL      reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    GREATER_EQUAL   reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    AND             reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    OR              reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    SEMICOLON       reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    PERIOD          reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    RIGHT_SQ_BRACKET reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    COMMA           reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)
    COLON           reduce using rule 72 (access_array -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET .)


state 181

    (66) print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list . RIGHT_PARENTHESIS SEMICOLON
    (73) expression_list -> expression_list . COMMA expression

    RIGHT_PARENTHESIS shift and go to state 200
    COMMA           shift and go to state 136


state 182

    (18) declaration -> symbol_type ID COLON data_type EQUAL expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 201
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 183

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET . EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    EQUAL           shift and go to state 202


state 184

    (71) assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression . SEMICOLON
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    SEMICOLON       shift and go to state 203
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 185

    (24) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET else_if_list
    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 204
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 186

    (31) switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
    (32) cases -> cases . case
    (34) case -> . CASE expression COLON block
    (35) case -> . DEFAULT COLON block

    RIGHT_CURLY_BRACKET shift and go to state 205
    CASE            shift and go to state 188
    DEFAULT         shift and go to state 189

    case                           shift and go to state 206

state 187

    (33) cases -> case .

    RIGHT_CURLY_BRACKET reduce using rule 33 (cases -> case .)
    CASE            reduce using rule 33 (cases -> case .)
    DEFAULT         reduce using rule 33 (cases -> case .)


state 188

    (34) case -> CASE . expression COLON block
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 207
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 189

    (35) case -> DEFAULT . COLON block

    COLON           shift and go to state 208


state 190

    (36) while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 209
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 191

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 210
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 192

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    RIGHT_PARENTHESIS shift and go to state 211


state 193

    (18) declaration -> symbol_type ID COLON data_type . EQUAL expression SEMICOLON
    (19) declaration -> symbol_type ID COLON data_type . SEMICOLON

    EQUAL           shift and go to state 163
    SEMICOLON       shift and go to state 164


state 194

    (47) param -> ID COLON data_type .
    (48) param -> ID COLON data_type . LEFT_SQ_BRACKET RIGHT_SQ_BRACKET

    RIGHT_PARENTHESIS reduce using rule 47 (param -> ID COLON data_type .)
    COMMA           reduce using rule 47 (param -> ID COLON data_type .)
    LEFT_SQ_BRACKET shift and go to state 212


state 195

    (41) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 213
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 196

    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 214


state 197

    (43) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 215
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 198

    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON . data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (103) data_type -> . NUMBER
    (104) data_type -> . FLOAT
    (105) data_type -> . STRING
    (106) data_type -> . CHAR
    (107) data_type -> . BOOLEAN

    NUMBER          shift and go to state 125
    FLOAT           shift and go to state 126
    STRING          shift and go to state 127
    CHAR            shift and go to state 128
    BOOLEAN         shift and go to state 129

    data_type                      shift and go to state 216

state 199

    (45) params -> params COMMA param .

    RIGHT_PARENTHESIS reduce using rule 45 (params -> params COMMA param .)
    COMMA           reduce using rule 45 (params -> params COMMA param .)


state 200

    (66) print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 217


state 201

    (18) declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .

    ID              reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    IF              reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    PARSEINT        reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    TYPEOF          reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    DECIMAL         reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    TEXT            reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    CHARACTER       reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    NULL            reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    $end            reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    MINUS           reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 18 (declaration -> symbol_type ID COLON data_type EQUAL expression SEMICOLON .)


state 202

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL . LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON

    LEFT_SQ_BRACKET shift and go to state 218


state 203

    (71) assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .

    ID              reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    IF              reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    FOR             reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    PARSEINT        reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    PARSEFLOAT      reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    TYPEOF          reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    CONSOLE         reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    VAR             reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    CONST           reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    INTEGER         reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    DECIMAL         reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    TEXT            reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    CHARACTER       reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    NULL            reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    $end            reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    CASE            reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 71 (assignment -> ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON .)


state 204

    (24) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .
    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET . ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET . else_if_list
    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET . else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (28) else_if_list -> . else_if_list else_if
    (29) else_if_list -> . else_if
    (30) else_if -> . ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    ID              reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 24 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    ELSE            shift and go to state 219

    else_if_list                   shift and go to state 220
    else_if                        shift and go to state 221

state 205

    (31) switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    ID              reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 31 (switch -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .)


state 206

    (32) cases -> cases case .

    RIGHT_CURLY_BRACKET reduce using rule 32 (cases -> cases case .)
    CASE            reduce using rule 32 (cases -> cases case .)
    DEFAULT         reduce using rule 32 (cases -> cases case .)


state 207

    (34) case -> CASE expression . COLON block
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    COLON           shift and go to state 222
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 208

    (35) case -> DEFAULT COLON . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 223
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 209

    (36) while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 36 (while -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 210

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 224


state 211

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 225


state 212

    (48) param -> ID COLON data_type LEFT_SQ_BRACKET . RIGHT_SQ_BRACKET

    RIGHT_SQ_BRACKET shift and go to state 226


state 213

    (41) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 41 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 214

    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 227
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 215

    (43) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 228
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 216

    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 229


state 217

    (66) print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .

    ID              reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    PARSEINT        reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    PARSEFLOAT      reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    TYPEOF          reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    CONSOLE         reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    INTEGER         reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    DECIMAL         reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    TEXT            reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    CHARACTER       reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 66 (print -> CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON .)


state 218

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET . expression_list RIGHT_SQ_BRACKET SEMICOLON
    (73) expression_list -> . expression_list COMMA expression
    (74) expression_list -> . expression
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression_list                shift and go to state 230
    expression                     shift and go to state 94
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 219

    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (30) else_if -> ELSE . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 232
    IF              shift and go to state 231


state 220

    (26) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .
    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list . ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (28) else_if_list -> else_if_list . else_if
    (30) else_if -> . ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    ID              reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    IF              reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    SWITCH          reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    WHILE           reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    FOR             reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    FUNCTION        reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    PARSEINT        reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    PARSEFLOAT      reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    TYPEOF          reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    BREAK           reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    CONTINUE        reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    RETURN          reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    CONSOLE         reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    VAR             reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    CONST           reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    INTEGER         reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    DECIMAL         reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    TEXT            reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    CHARACTER       reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    BOOL            reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    NULL            reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    $end            reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    RIGHT_CURLY_BRACKET reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    CASE            reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    DEFAULT         reduce using rule 26 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list .)
    ELSE            shift and go to state 233

    else_if                        shift and go to state 234

state 221

    (29) else_if_list -> else_if .

    ELSE            reduce using rule 29 (else_if_list -> else_if .)
    ID              reduce using rule 29 (else_if_list -> else_if .)
    IF              reduce using rule 29 (else_if_list -> else_if .)
    SWITCH          reduce using rule 29 (else_if_list -> else_if .)
    WHILE           reduce using rule 29 (else_if_list -> else_if .)
    FOR             reduce using rule 29 (else_if_list -> else_if .)
    FUNCTION        reduce using rule 29 (else_if_list -> else_if .)
    PARSEINT        reduce using rule 29 (else_if_list -> else_if .)
    PARSEFLOAT      reduce using rule 29 (else_if_list -> else_if .)
    TYPEOF          reduce using rule 29 (else_if_list -> else_if .)
    BREAK           reduce using rule 29 (else_if_list -> else_if .)
    CONTINUE        reduce using rule 29 (else_if_list -> else_if .)
    RETURN          reduce using rule 29 (else_if_list -> else_if .)
    CONSOLE         reduce using rule 29 (else_if_list -> else_if .)
    VAR             reduce using rule 29 (else_if_list -> else_if .)
    CONST           reduce using rule 29 (else_if_list -> else_if .)
    INTEGER         reduce using rule 29 (else_if_list -> else_if .)
    DECIMAL         reduce using rule 29 (else_if_list -> else_if .)
    TEXT            reduce using rule 29 (else_if_list -> else_if .)
    CHARACTER       reduce using rule 29 (else_if_list -> else_if .)
    BOOL            reduce using rule 29 (else_if_list -> else_if .)
    NULL            reduce using rule 29 (else_if_list -> else_if .)
    $end            reduce using rule 29 (else_if_list -> else_if .)
    RIGHT_CURLY_BRACKET reduce using rule 29 (else_if_list -> else_if .)
    CASE            reduce using rule 29 (else_if_list -> else_if .)
    DEFAULT         reduce using rule 29 (else_if_list -> else_if .)


state 222

    (34) case -> CASE expression COLON . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 235
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 223

    (35) case -> DEFAULT COLON block .
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET reduce using rule 35 (case -> DEFAULT COLON block .)
    CASE            reduce using rule 35 (case -> DEFAULT COLON block .)
    DEFAULT         reduce using rule 35 (case -> DEFAULT COLON block .)
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 224

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    declaration                    shift and go to state 4
    block                          shift and go to state 236
    instruction                    shift and go to state 3
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 225

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    symbol_type                    shift and go to state 18
    block                          shift and go to state 237
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 226

    (48) param -> ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET .

    RIGHT_PARENTHESIS reduce using rule 48 (param -> ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET .)
    COMMA           reduce using rule 48 (param -> ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET .)


state 227

    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 238
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 228

    (43) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 43 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 229

    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 239
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 230

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list . RIGHT_SQ_BRACKET SEMICOLON
    (73) expression_list -> expression_list . COMMA expression

    RIGHT_SQ_BRACKET shift and go to state 240
    COMMA           shift and go to state 136


state 231

    (30) else_if -> ELSE IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_PARENTHESIS shift and go to state 241


state 232

    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 242
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 233

    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (30) else_if -> ELSE . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 243
    IF              shift and go to state 231


state 234

    (28) else_if_list -> else_if_list else_if .

    ELSE            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    ID              reduce using rule 28 (else_if_list -> else_if_list else_if .)
    IF              reduce using rule 28 (else_if_list -> else_if_list else_if .)
    SWITCH          reduce using rule 28 (else_if_list -> else_if_list else_if .)
    WHILE           reduce using rule 28 (else_if_list -> else_if_list else_if .)
    FOR             reduce using rule 28 (else_if_list -> else_if_list else_if .)
    FUNCTION        reduce using rule 28 (else_if_list -> else_if_list else_if .)
    PARSEINT        reduce using rule 28 (else_if_list -> else_if_list else_if .)
    PARSEFLOAT      reduce using rule 28 (else_if_list -> else_if_list else_if .)
    TYPEOF          reduce using rule 28 (else_if_list -> else_if_list else_if .)
    BREAK           reduce using rule 28 (else_if_list -> else_if_list else_if .)
    CONTINUE        reduce using rule 28 (else_if_list -> else_if_list else_if .)
    RETURN          reduce using rule 28 (else_if_list -> else_if_list else_if .)
    CONSOLE         reduce using rule 28 (else_if_list -> else_if_list else_if .)
    VAR             reduce using rule 28 (else_if_list -> else_if_list else_if .)
    CONST           reduce using rule 28 (else_if_list -> else_if_list else_if .)
    INTEGER         reduce using rule 28 (else_if_list -> else_if_list else_if .)
    DECIMAL         reduce using rule 28 (else_if_list -> else_if_list else_if .)
    TEXT            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    CHARACTER       reduce using rule 28 (else_if_list -> else_if_list else_if .)
    BOOL            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    NULL            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    $end            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    RIGHT_CURLY_BRACKET reduce using rule 28 (else_if_list -> else_if_list else_if .)
    CASE            reduce using rule 28 (else_if_list -> else_if_list else_if .)
    DEFAULT         reduce using rule 28 (else_if_list -> else_if_list else_if .)


state 235

    (34) case -> CASE expression COLON block .
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET reduce using rule 34 (case -> CASE expression COLON block .)
    CASE            reduce using rule 34 (case -> CASE expression COLON block .)
    DEFAULT         reduce using rule 34 (case -> CASE expression COLON block .)
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 236

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 244
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    declaration                    shift and go to state 4
    instruction                    shift and go to state 42
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 237

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 245
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    symbol_type                    shift and go to state 18
    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 238

    (42) function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 42 (function -> FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 239

    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 246
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 240

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 247


state 241

    (30) else_if -> ELSE IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (75) expression -> . expression_unary
    (76) expression -> . expression_binary
    (77) expression -> . expression_group
    (78) expression -> . methods
    (79) expression -> . call_function
    (80) expression_unary -> . MINUS expression
    (81) expression_unary -> . NOT expression
    (82) expression_unary -> . expression INCREASE
    (83) expression_unary -> . expression DECREASE
    (84) expression_binary -> . arithmetic
    (85) expression_binary -> . relational
    (86) expression_binary -> . logical
    (100) expression_group -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (87) arithmetic -> . expression PLUS expression
    (88) arithmetic -> . expression MINUS expression
    (89) arithmetic -> . expression TIMES expression
    (90) arithmetic -> . expression DIVIDE expression
    (91) arithmetic -> . expression MODULUS expression
    (92) relational -> . expression LESS expression
    (93) relational -> . expression GREATER expression
    (94) relational -> . expression EQUAL_TO expression
    (95) relational -> . expression NOT_EQUAL_TO expression
    (96) relational -> . expression LESS_EQUAL expression
    (97) relational -> . expression GREATER_EQUAL expression
    (98) logical -> . expression AND expression
    (99) logical -> . expression OR expression
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    MINUS           shift and go to state 63
    NOT             shift and go to state 64
    LEFT_PARENTHESIS shift and go to state 68
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    ID              shift and go to state 69
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 248
    expression_unary               shift and go to state 58
    expression_binary              shift and go to state 59
    expression_group               shift and go to state 60
    methods                        shift and go to state 61
    call_function                  shift and go to state 62
    arithmetic                     shift and go to state 65
    relational                     shift and go to state 66
    logical                        shift and go to state 67
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 242

    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 249
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 243

    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 250
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 244

    (37) for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 37 (for -> FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 245

    (38) for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 38 (for -> FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 246

    (44) function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 44 (function -> FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 247

    (70) declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .

    ID              reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    IF              reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    SWITCH          reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    WHILE           reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    FOR             reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    PARSEINT        reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    PARSEFLOAT      reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    TYPEOF          reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    BREAK           reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    RETURN          reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    CONSOLE         reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    VAR             reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    CONST           reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    INTEGER         reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    DECIMAL         reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    TEXT            reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    CHARACTER       reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    BOOL            reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    NULL            reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    $end            reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    CASE            reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)
    DEFAULT         reduce using rule 70 (declaration_array -> symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON .)


state 248

    (30) else_if -> ELSE IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (82) expression_unary -> expression . INCREASE
    (83) expression_unary -> expression . DECREASE
    (87) arithmetic -> expression . PLUS expression
    (88) arithmetic -> expression . MINUS expression
    (89) arithmetic -> expression . TIMES expression
    (90) arithmetic -> expression . DIVIDE expression
    (91) arithmetic -> expression . MODULUS expression
    (92) relational -> expression . LESS expression
    (93) relational -> expression . GREATER expression
    (94) relational -> expression . EQUAL_TO expression
    (95) relational -> expression . NOT_EQUAL_TO expression
    (96) relational -> expression . LESS_EQUAL expression
    (97) relational -> expression . GREATER_EQUAL expression
    (98) logical -> expression . AND expression
    (99) logical -> expression . OR expression

    RIGHT_PARENTHESIS shift and go to state 251
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULUS         shift and go to state 107
    LESS            shift and go to state 108
    GREATER         shift and go to state 109
    EQUAL_TO        shift and go to state 110
    NOT_EQUAL_TO    shift and go to state 111
    LESS_EQUAL      shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115


state 249

    (25) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 25 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 250

    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 252
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 251

    (30) else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 253


state 252

    (27) if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ID              reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 27 (if -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)


state 253

    (30) else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET . block RIGHT_CURLY_BRACKET
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    block                          shift and go to state 254
    instruction                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 254

    (30) else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block . RIGHT_CURLY_BRACKET
    (2) block -> block . instruction
    (4) instruction -> . declaration
    (5) instruction -> . declaration_array
    (6) instruction -> . assignment
    (7) instruction -> . if
    (8) instruction -> . switch
    (9) instruction -> . while
    (10) instruction -> . for
    (11) instruction -> . function
    (12) instruction -> . methods SEMICOLON
    (13) instruction -> . call_function SEMICOLON
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (18) declaration -> . symbol_type ID COLON data_type EQUAL expression SEMICOLON
    (19) declaration -> . symbol_type ID COLON data_type SEMICOLON
    (20) declaration -> . symbol_type ID EQUAL expression SEMICOLON
    (70) declaration_array -> . symbol_type ID COLON data_type LEFT_SQ_BRACKET RIGHT_SQ_BRACKET EQUAL LEFT_SQ_BRACKET expression_list RIGHT_SQ_BRACKET SEMICOLON
    (21) assignment -> . ID EQUAL expression SEMICOLON
    (22) assignment -> . ID ADITION expression SEMICOLON
    (23) assignment -> . ID SUBTRACTION expression SEMICOLON
    (71) assignment -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET EQUAL expression SEMICOLON
    (24) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (25) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (26) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list
    (27) if -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET else_if_list ELSE LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (31) switch -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
    (36) while -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (37) for -> . FOR LEFT_PARENTHESIS declaration expression SEMICOLON expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (38) for -> . FOR LEFT_PARENTHESIS symbol_type ID OF ID RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (41) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (42) function -> . FUNCTION ID LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (43) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (44) function -> . FUNCTION ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS COLON data_type LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET
    (53) methods -> . methods PERIOD name_method LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (54) methods -> . methods PERIOD name_method expression
    (55) methods -> . methods PERIOD name_method
    (56) methods -> . access_array
    (57) methods -> . value
    (67) methods -> . PARSEINT expression
    (68) methods -> . PARSEFLOAT expression
    (69) methods -> . TYPEOF expression
    (51) call_function -> . ID LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (52) call_function -> . ID LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (39) break -> . BREAK SEMICOLON
    (40) continue -> . CONTINUE SEMICOLON
    (49) return -> . RETURN expression SEMICOLON
    (50) return -> . RETURN SEMICOLON
    (66) print -> . CONSOLE PERIOD LOG LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS SEMICOLON
    (101) symbol_type -> . VAR
    (102) symbol_type -> . CONST
    (72) access_array -> . ID LEFT_SQ_BRACKET expression RIGHT_SQ_BRACKET
    (108) value -> . INTEGER
    (109) value -> . DECIMAL
    (110) value -> . TEXT
    (111) value -> . CHARACTER
    (112) value -> . BOOL
    (113) value -> . NULL
    (114) value -> . ID

    RIGHT_CURLY_BRACKET shift and go to state 255
    ID              shift and go to state 19
    IF              shift and go to state 20
    SWITCH          shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    FUNCTION        shift and go to state 24
    PARSEINT        shift and go to state 27
    PARSEFLOAT      shift and go to state 28
    TYPEOF          shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    CONSOLE         shift and go to state 33
    VAR             shift and go to state 34
    CONST           shift and go to state 35
    INTEGER         shift and go to state 36
    DECIMAL         shift and go to state 37
    TEXT            shift and go to state 38
    CHARACTER       shift and go to state 39
    BOOL            shift and go to state 40
    NULL            shift and go to state 41

    instruction                    shift and go to state 42
    declaration                    shift and go to state 4
    declaration_array              shift and go to state 5
    assignment                     shift and go to state 6
    if                             shift and go to state 7
    switch                         shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    function                       shift and go to state 11
    methods                        shift and go to state 12
    call_function                  shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    symbol_type                    shift and go to state 18
    access_array                   shift and go to state 25
    value                          shift and go to state 26

state 255

    (30) else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .

    ELSE            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    ID              reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    FUNCTION        reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEINT        reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    PARSEFLOAT      reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TYPEOF          reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONSOLE         reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    VAR             reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    INTEGER         reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DECIMAL         reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    TEXT            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 30 (else_if -> ELSE IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACKET block RIGHT_CURLY_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INCREASE in state 57 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 57 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for PERIOD in state 61 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 70 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 71 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 123 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 123 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
